{"remainingRequest":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/components/EmployeeForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/components/EmployeeForm.vue","mtime":1632466098878},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js","mtime":1632429635042},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js","mtime":1632429636569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmxldCB0aWxlc2V0aWQ7CmNvbnN0IE1ZX0FDQ0VTU19UT0tFTiA9CiAgJ3NrLmV5SjFJam9pZVdseGFXNW5aMmRuSWl3aVlTSTZJbU5yZEhobWEzWmlZekJyTVhReWJuUm9lbUZrT1RsaE1XNGlmUS5GZTBYaHZZS3NjNUE5TW1FOHhEN09RJzsKY29uc3QgbWJ4VXBsb2FkcyA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkay9zZXJ2aWNlcy91cGxvYWRzJyk7CmNvbnN0IG1ieENsaWVudCA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkaycpOwpjb25zdCBiYXNlQ2xpZW50ID0gbWJ4Q2xpZW50KHsgYWNjZXNzVG9rZW46IE1ZX0FDQ0VTU19UT0tFTiB9KTsKY29uc3QgdXBsb2Fkc0NsaWVudCA9IG1ieFVwbG9hZHMoYmFzZUNsaWVudCk7Ci8vIGxldCB1cGxvYWRJZDsKaW1wb3J0IG1hcGJveGdsIGZyb20gJ21hcGJveC1nbCc7CmNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTsKbWFwYm94Z2wuYWNjZXNzVG9rZW4gPQogICdway5leUoxSWpvaWVXbHhhVzVuWjJkbklpd2lZU0k2SW1OcmRIa3dNMncxY1RKNWRXZ3lkbkJ0ZFd4NE1YRmxOM0VpZlEuV29TejJabi1oN1NrZERtb3V4QzBYUSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnZW1wbG95ZWUtZm9ybScsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHN1Ym1pdGluZzogZmFsc2UsCiAgICAgIGVycm9yOiBmYWxzZSwKICAgICAgc3VjY2VzczogZmFsc2UsCiAgICAgIGVtcGxveWVlOiB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgZW1haWw6ICcnLAogICAgICB9LAogICAgICBzZWxlY3RlZEZpbGU6IG51bGwsCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgb25QaWNrRmlsZSgpIHsKICAgICAgdGhpcy4kcmVmcy5maWxlSW5wdXQuY2xpY2soKTsKICAgIH0sCiAgICAvLyBhc3luYyBjaGVja1VwbG9hZFN0YXR1cygpIHsKICAgIC8vICAgYXdhaXQgdXBsb2Fkc0NsaWVudAogICAgLy8gICAgIC5nZXRVcGxvYWQoewogICAgLy8gICAgICAgdXBsb2FkSWQ6IHVwbG9hZElkLAogICAgLy8gICAgIH0pCiAgICAvLyAgICAgLnNlbmQoKQogICAgLy8gICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgLy8gICAgICAgY29uc3Qgc3RhdHVzID0gcmVzcG9uc2UuYm9keTsKICAgIC8vICAgICAgIGNvbnNvbGUubG9nKHN0YXR1cyk7CiAgICAvLyAgICAgfSk7CiAgICAvLyB9LAogICAgYXN5bmMgaGFuZGxlRmlsZVN1Ym1pdCgpIHsKICAgICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nIHVwbG9hZC4uLicpOwogICAgICAvLyBjb25zb2xlLmxvZyhldmVudC50YXJnZXQuZmlsZXMpOwogICAgICAvLyBpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CiAgICAgIGNvbnN0IGdldENyZWRlbnRpYWxzID0gKCkgPT4gewogICAgICAgIHJldHVybiB1cGxvYWRzQ2xpZW50CiAgICAgICAgICAuY3JlYXRlVXBsb2FkQ3JlZGVudGlhbHMoKQogICAgICAgICAgLnNlbmQoKQogICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5ib2R5KTsKICAgICAgfTsKICAgICAgY29uc3QgcHV0RmlsZU9uUzMgPSAoY3JlZGVudGlhbHMpID0+IHsKICAgICAgICBjb25zdCBzMyA9IG5ldyBBV1MuUzMoewogICAgICAgICAgYWNjZXNzS2V5SWQ6IGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkLAogICAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiBjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksCiAgICAgICAgICBzZXNzaW9uVG9rZW46IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbiwKICAgICAgICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHMzCiAgICAgICAgICAucHV0T2JqZWN0KHsKICAgICAgICAgICAgQnVja2V0OiBjcmVkZW50aWFscy5idWNrZXQsCiAgICAgICAgICAgIEtleTogY3JlZGVudGlhbHMua2V5LAogICAgICAgICAgICBCb2R5OiB0aGlzLnNlbGVjdGVkRmlsZSwKICAgICAgICAgICAgLy8gQm9keTogZnMuY3JlYXRlUmVhZFN0cmVhbSgnL3BhdGgvdG8vZmlsZS5tYnRpbGVzJykKICAgICAgICAgIH0pCiAgICAgICAgICAucHJvbWlzZSgpOwogICAgICB9OwogICAgICAvLyBjb25zb2xlLmxvZyhhd2FpdCBnZXRDcmVkZW50aWFscygpKTsKICAgICAgLy8gbGV0IGNyZWRlbnRpYWxzID0gYXdhaXQgZ2V0Q3JlZGVudGlhbHMoKTsKICAgICAgLy8gY29uc29sZS5sb2coY3JlZGVudGlhbHMpOwogICAgICAvLyBjcmVkZW50aWFscyA9IHB1dEZpbGVPblMzKGNyZWRlbnRpYWxzKTsKICAgICAgLy8gcmVzcG9uc2UudGhlbihjb25zb2xlLmxvZyk7CiAgICAgIC8vIHJlc3BvbnNlLnRoZW4oKHJlcykgPT4gY29uc29sZS5sb2cocmVzKSk7CiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgZ2V0Q3JlZGVudGlhbHMoKTsKICAgICAgcHV0RmlsZU9uUzMoY3JlZGVudGlhbHMpOwogICAgICBjb25zdCBteVVzZXJuYW1lID0gJ3lpcWluZ2dnZyc7CiAgICAgIGNvbnN0IG15VGlsZXNldCA9ICdteVRpbGVzZXQyJzsKICAgICAgLy8gY29uc3QgY3JlZGVudGlhbHMgPSB1cGxvYWRzQ2xpZW50LmNyZWF0ZVVwbG9hZENyZWRlbnRpYWxzKCk7CiAgICAgIGNvbnNvbGUubG9nKGNyZWRlbnRpYWxzKTsKICAgICAgdXBsb2Fkc0NsaWVudAogICAgICAgIC5jcmVhdGVVcGxvYWQoewogICAgICAgICAgdGlsZXNldDogYCR7bXlVc2VybmFtZX0uJHtteVRpbGVzZXR9YCwKICAgICAgICAgIHVybDoKICAgICAgICAgICAgJ2h0dHBzOi8vdGlsZXN0cmVhbS10aWxlc2V0cy1wcm9kdWN0aW9uLnMzLmFtYXpvbmF3cy5jb20vZjkvX3BlbmRpbmcvb2pkeGI3dHlrcDgyeDFzM25jZXF5eHRrYy95aXFpbmdnZ2cnLAogICAgICAgICAgbmFtZTogJ0pNTFEgVVBMT0FEMScsCiAgICAgICAgfSkKICAgICAgICAuc2VuZCgpCiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICBjb25zdCB1cGxvYWQgPSByZXNwb25zZS5ib2R5OwogICAgICAgICAgY29uc29sZS5sb2codXBsb2FkLCB1cGxvYWQudGlsZXNldCk7CiAgICAgICAgICB0aWxlc2V0aWQgPSB1cGxvYWQudGlsZXNldDsKICAgICAgICAgIC8vIHVwbG9hZElkID0gcmVzcG9uc2UuYm9keS5pZDsKICAgICAgICB9KTsKICAgICAgLy8gYXdhaXQgdXBsb2Fkc0NsaWVudAogICAgICAvLyAgIC5nZXRVcGxvYWQoewogICAgICAvLyAgICAgdXBsb2FkSWQ6IHVwbG9hZElkLAogICAgICAvLyAgIH0pCiAgICAgIC8vICAgLnNlbmQoKQogICAgICAvLyAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAvLyAgICAgY29uc3Qgc3RhdHVzID0gcmVzcG9uc2UuYm9keTsKICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHN0YXR1cyk7CiAgICAgIC8vICAgfSk7CiAgICAgIGNvbnNvbGUubG9nKCdkb25lJyk7CiAgICAgIGNvbnN0IG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoewogICAgICAgIGNvbnRhaW5lcjogJ21hcC1jb21wb25lbnQnLCAvLyBjb250YWluZXIgSUQKICAgICAgICBzdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTEnLCAvLyBzdHlsZSBVUkwKICAgICAgICBjZW50ZXI6IFstMTIyLjI3Mjc4MSwgMzcuODcxNjY2XSwgLy8gc3RhcnRpbmcgcG9zaXRpb24gW2xuZywgbGF0XQogICAgICAgIHpvb206IDE1LCAvLyBzdGFydGluZyB6b29tCiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyh0aWxlc2V0aWQpOwogICAgICBtYXAub24oJ2xvYWQnLCAoKSA9PiB7CiAgICAgICAgbWFwLmFkZFNvdXJjZSgncGFya3MnLCB7CiAgICAgICAgICB0eXBlOiAndmVjdG9yJywKICAgICAgICAgIHVybDogYG1hcGJveDovL3lpcWluZ2dnZy5teVRpbGVzZXQyYCwKICAgICAgICB9KTsKICAgICAgICBtYXAuYWRkTGF5ZXIoewogICAgICAgICAgaWQ6ICdwYXJrcycsCiAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICBzb3VyY2U6ICdwYXJrcycsCiAgICAgICAgICAnc291cmNlLWxheWVyJzogJ0pNTFEgVVBMT0FEMScsCiAgICAgICAgICBsYXlvdXQ6IHsKICAgICAgICAgICAgLy8gTWFrZSB0aGUgbGF5ZXIgdmlzaWJsZSBieSBkZWZhdWx0LgogICAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZScsCiAgICAgICAgICAgICdsaW5lLWpvaW4nOiAncm91bmQnLAogICAgICAgICAgICAnbGluZS1jYXAnOiAncm91bmQnLAogICAgICAgICAgfSwKICAgICAgICAgIHBhaW50OiB7CiAgICAgICAgICAgICdsaW5lLWNvbG9yJzogJyM4NzdiNTknLAogICAgICAgICAgICAnbGluZS13aWR0aCc6IDIwLAogICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgLy8gYXN5bmMgb25GaWxlUGlja2VkIChldmVudCkgewogICAgLy8gICBjb25zdCBmaWxlcyA9IGV2ZW50LnRhcmdldC5maWxlcwogICAgLy8gICBsZXQgZmlsZW5hbWUgPSBmaWxlc1swXS5uYW1lCiAgICAvLyAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpCiAgICAvLyAgIGZpbGVSZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHsKICAgIC8vICAgICB0aGlzLmltYWdlVXJsID0gZmlsZVJlYWRlci5yZXN1bHQKICAgIC8vICAgfSkKICAgIC8vICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGVzWzBdKQogICAgLy8gICB0aGlzLmltYWdlID0gZmlsZXNbMF0KICAgIC8vICAgY29uc29sZS5sb2coZmlsZW5hbWUpOwogICAgLy8gICBhd2FpdCBoYW5kbGVGaWxlU3VibWl0KHRoaXMuaW1hZ2UpOwogICAgLy8gfSwKICAgIGFzeW5jIHByZXZpZXdGaWxlcyhldmVudCkgewogICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTsKICAgIH0sCiAgICBoYW5kbGVTdWJtaXQoKSB7CiAgICAgIGNvbnNvbGUubG9nKCd0ZXN0aW5nIGhhbmRsZVN1Ym1pdCcpOwogICAgICB0aGlzLnN1Ym1pdHRpbmcgPSB0cnVlOwogICAgICB0aGlzLmNsZWFyU3RhdHVzKCk7CiAgICAgIGlmICh0aGlzLmludmFsaWROYW1lIHx8IHRoaXMuaW52YWxpZEVtYWlsKSB7CiAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuJGVtaXQoJ2FkZDplbXBsb3llZScsIHRoaXMuZW1wbG95ZWUpOwogICAgICB0aGlzLiRyZWZzLmZpcnN0LmZvY3VzKCk7CiAgICAgIHRoaXMuZW1wbG95ZWUgPSB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgZW1haWw6ICcnLAogICAgICB9OwogICAgICB0aGlzLmVycm9yID0gZmFsc2U7CiAgICAgIHRoaXMuc3VjY2VzcyA9IHRydWU7CiAgICAgIHRoaXMuc3VibWl0dGluZyA9IGZhbHNlOwogICAgfSwKICAgIGNsZWFyU3RhdHVzKCkgewogICAgICB0aGlzLnN1Y2Nlc3MgPSBmYWxzZTsKICAgICAgdGhpcy5lcnJvciA9IGZhbHNlOwogICAgfSwKICB9LAogIGNvbXB1dGVkOiB7CiAgICBpbnZhbGlkTmFtZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuZW1wbG95ZWUubmFtZSA9PT0gJyc7CiAgICB9LAogICAgaW52YWxpZEVtYWlsKCkgewogICAgICByZXR1cm4gdGhpcy5lbXBsb3llZS5lbWFpbCA9PT0gJyc7CiAgICB9LAogIH0sCn07Ci8vICAgZXhwb3J0IGRlZmF1bHQgewovLyAgICAgbmFtZTogJ2VtcGxveWVlLWZvcm0nLAovLyAgICAgZGF0YSgpIHsKLy8gICAgICAgcmV0dXJuIHsKLy8gICAgICAgICBlbXBsb3llZTogewovLyAgICAgICAgICAgbmFtZTogJycsCi8vICAgICAgICAgICBlbWFpbDogJycsCi8vICAgICAgICAgfSwKLy8gICAgICAgfQovLyAgICAgfSwKLy8gICAgIG1ldGhvZHM6IHsKLy8gICAgICAgICBoYW5kbGVTdWJtaXQoKSB7Ci8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0ZXN0aW5nIGhhbmRsZVN1Ym1pdCcpCi8vICAgICAgICAgfSwKLy8gICAgIH0sCi8vICAgfQo="},{"version":3,"sources":["EmployeeForm.vue"],"names":[],"mappingsfile":"EmployeeForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"employee-form\">\n    <label>Shapefile upload</label>\n    <!-- <form @submit.prevent=\"checkUploadStatus\">\n      <button>Check</button>\n    </form> -->\n    <form\n      class=\"upload\"\n      @submit.prevent=\"handleFileSubmit\"\n      @change=\"previewFiles\"\n    >\n      <input type=\"file\" name=\"uploadFile\" accept=\".zip\" required />\n      <br /><br />\n      <input type=\"submit\" />\n    </form>\n\n    <button class=\"btn btn-info\" @click=\"onPickFile\">\n      Upload profile picture\n    </button>\n    <input\n      type=\"file\"\n      style=\"display: none\"\n      ref=\"fileInput\"\n      @change=\"onFilePicked\"\n    />\n\n    <form @submit.prevent=\"handleSubmit\">\n      <!-- <input type=\"text\" /> -->\n      <label>Employee name</label>\n      <input\n        ref=\"first\"\n        type=\"text\"\n        :class=\"{ 'has-error': submitting && invalidName }\"\n        v-model=\"employee.name\"\n        @focus=\"clearStatus\"\n        @keypress=\"clearStatus\"\n      />\n      <label>Employee Email</label>\n      <!-- <input type=\"text\" /> -->\n      <!-- <input v-model=\"employee.email\" type=\"text\" /> -->\n      <input\n        type=\"text\"\n        :class=\"{ 'has-error': submitting && invalidEmail }\"\n        v-model=\"employee.email\"\n        @focus=\"clearStatus\"\n        @keypress=\"clearStatus\"\n      />\n      <p v-if=\"error && submitting\" class=\"error-message\">\n        Please fill out all required fields.\n      </p>\n      <p v-if=\"success\" class=\"success-message\">\n        Employee successfully added!\n      </p>\n      <button>Add Employee</button>\n    </form>\n    <div id=\"map-component\" />\n  </div>\n</template>\n\n<script>\nlet tilesetid;\nconst MY_ACCESS_TOKEN =\n  'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhma3ZiYzBrMXQybnRoemFkOTlhMW4ifQ.Fe0XhvYKsc5A9MmE8xD7OQ';\nconst mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\nconst mbxClient = require('@mapbox/mapbox-sdk');\nconst baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\nconst uploadsClient = mbxUploads(baseClient);\n// let uploadId;\nimport mapboxgl from 'mapbox-gl';\nconst AWS = require('aws-sdk');\nmapboxgl.accessToken =\n  'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHkwM2w1cTJ5dWgydnBtdWx4MXFlN3EifQ.WoSz2Zn-h7SkdDmouxC0XQ';\nexport default {\n  name: 'employee-form',\n  data() {\n    return {\n      submiting: false,\n      error: false,\n      success: false,\n      employee: {\n        name: '',\n        email: '',\n      },\n      selectedFile: null,\n    };\n  },\n  methods: {\n    async onPickFile() {\n      this.$refs.fileInput.click();\n    },\n    // async checkUploadStatus() {\n    //   await uploadsClient\n    //     .getUpload({\n    //       uploadId: uploadId,\n    //     })\n    //     .send()\n    //     .then((response) => {\n    //       const status = response.body;\n    //       console.log(status);\n    //     });\n    // },\n    async handleFileSubmit() {\n      console.log('starting upload...');\n      // console.log(event.target.files);\n      // import * as fs from 'fs';\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.selectedFile,\n            // Body: fs.createReadStream('/path/to/file.mbtiles')\n          })\n          .promise();\n      };\n      // console.log(await getCredentials());\n      // let credentials = await getCredentials();\n      // console.log(credentials);\n      // credentials = putFileOnS3(credentials);\n      // response.then(console.log);\n      // response.then((res) => console.log(res));\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      const myUsername = 'yiqingggg';\n      const myTileset = 'myTileset2';\n      // const credentials = uploadsClient.createUploadCredentials();\n      console.log(credentials);\n      uploadsClient\n        .createUpload({\n          tileset: `${myUsername}.${myTileset}`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/f9/_pending/ojdxb7tykp82x1s3nceqyxtkc/yiqingggg',\n          name: 'JMLQ UPLOAD1',\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload, upload.tileset);\n          tilesetid = upload.tileset;\n          // uploadId = response.body.id;\n        });\n      // await uploadsClient\n      //   .getUpload({\n      //     uploadId: uploadId,\n      //   })\n      //   .send()\n      //   .then((response) => {\n      //     const status = response.body;\n      //     console.log(status);\n      //   });\n      console.log('done');\n      const map = new mapboxgl.Map({\n        container: 'map-component', // container ID\n        style: 'mapbox://styles/mapbox/streets-v11', // style URL\n        center: [-122.272781, 37.871666], // starting position [lng, lat]\n        zoom: 15, // starting zoom\n      });\n      console.log(tilesetid);\n      map.on('load', () => {\n        map.addSource('parks', {\n          type: 'vector',\n          url: `mapbox://yiqingggg.myTileset2`,\n        });\n        map.addLayer({\n          id: 'parks',\n          type: 'line',\n          source: 'parks',\n          'source-layer': 'JMLQ UPLOAD1',\n          layout: {\n            // Make the layer visible by default.\n            visibility: 'visible',\n            'line-join': 'round',\n            'line-cap': 'round',\n          },\n          paint: {\n            'line-color': '#877b59',\n            'line-width': 20,\n          },\n        });\n      });\n    },\n    // async onFilePicked (event) {\n    //   const files = event.target.files\n    //   let filename = files[0].name\n    //   const fileReader = new FileReader()\n    //   fileReader.addEventListener('load', () => {\n    //     this.imageUrl = fileReader.result\n    //   })\n    //   fileReader.readAsDataURL(files[0])\n    //   this.image = files[0]\n    //   console.log(filename);\n    //   await handleFileSubmit(this.image);\n    // },\n    async previewFiles(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    handleSubmit() {\n      console.log('testing handleSubmit');\n      this.submitting = true;\n      this.clearStatus();\n      if (this.invalidName || this.invalidEmail) {\n        this.error = true;\n        return;\n      }\n      this.$emit('add:employee', this.employee);\n      this.$refs.first.focus();\n      this.employee = {\n        name: '',\n        email: '',\n      };\n      this.error = false;\n      this.success = true;\n      this.submitting = false;\n    },\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n  },\n  computed: {\n    invalidName() {\n      return this.employee.name === '';\n    },\n    invalidEmail() {\n      return this.employee.email === '';\n    },\n  },\n};\n//   export default {\n//     name: 'employee-form',\n//     data() {\n//       return {\n//         employee: {\n//           name: '',\n//           email: '',\n//         },\n//       }\n//     },\n//     methods: {\n//         handleSubmit() {\n//             console.log('testing handleSubmit')\n//         },\n//     },\n//   }\n</script>\n\n<style scoped>\nform {\n  margin-bottom: 2rem;\n}\n[class*='-message'] {\n  font-weight: 500;\n}\n.error-message {\n  color: #d33c40;\n}\n.success-message {\n  color: #32a95d;\n}\n</style>\n"]}]}