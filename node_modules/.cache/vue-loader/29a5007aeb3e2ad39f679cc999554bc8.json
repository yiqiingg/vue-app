{"remainingRequest":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/components/EmployeeForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/components/EmployeeForm.vue","mtime":1632777350946},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js","mtime":1632429635042},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js","mtime":1632429636569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmxldCB0aWxlc2V0aWQ7CmNvbnN0IE1ZX0FDQ0VTU19UT0tFTiA9CiAgJ3NrLmV5SjFJam9pZVdseGFXNW5aMmRuSWl3aVlTSTZJbU5yZEhobWEzWmlZekJyTVhReWJuUm9lbUZrT1RsaE1XNGlmUS5GZTBYaHZZS3NjNUE5TW1FOHhEN09RJzsKY29uc3QgbWJ4VXBsb2FkcyA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkay9zZXJ2aWNlcy91cGxvYWRzJyk7CmNvbnN0IG1ieENsaWVudCA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkaycpOwpjb25zdCBiYXNlQ2xpZW50ID0gbWJ4Q2xpZW50KHsgYWNjZXNzVG9rZW46IE1ZX0FDQ0VTU19UT0tFTiB9KTsKY29uc3QgdXBsb2Fkc0NsaWVudCA9IG1ieFVwbG9hZHMoYmFzZUNsaWVudCk7Ci8vIGxldCB1cGxvYWRJZDsKaW1wb3J0IG1hcGJveGdsIGZyb20gJ21hcGJveC1nbCc7CmNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTsKbWFwYm94Z2wuYWNjZXNzVG9rZW4gPQogICdway5leUoxSWpvaWVXbHhhVzVuWjJkbklpd2lZU0k2SW1OcmRIa3dNMncxY1RKNWRXZ3lkbkJ0ZFd4NE1YRmxOM0VpZlEuV29TejJabi1oN1NrZERtb3V4QzBYUSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnZW1wbG95ZWUtZm9ybScsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHN1Ym1pdGluZzogZmFsc2UsCiAgICAgIGVycm9yOiBmYWxzZSwKICAgICAgc3VjY2VzczogZmFsc2UsCiAgICAgIHNoYXBlZmlsZXM6IHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBpZDogJycsCiAgICAgIH0sCiAgICAgIHNlbGVjdGVkRmlsZTogbnVsbCwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBvblBpY2tGaWxlKCkgewogICAgICB0aGlzLiRyZWZzLmZpbGVJbnB1dC5jbGljaygpOwogICAgfSwKICAgIC8vIGFzeW5jIGNoZWNrVXBsb2FkU3RhdHVzKCkgewogICAgLy8gICBhd2FpdCB1cGxvYWRzQ2xpZW50CiAgICAvLyAgICAgLmdldFVwbG9hZCh7CiAgICAvLyAgICAgICB1cGxvYWRJZDogdXBsb2FkSWQsCiAgICAvLyAgICAgfSkKICAgIC8vICAgICAuc2VuZCgpCiAgICAvLyAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAvLyAgICAgICBjb25zdCBzdGF0dXMgPSByZXNwb25zZS5ib2R5OwogICAgLy8gICAgICAgY29uc29sZS5sb2coc3RhdHVzKTsKICAgIC8vICAgICB9KTsKICAgIC8vIH0sCiAgICBhc3luYyBoYW5kbGVGaWxlU3VibWl0KCkgewogICAgICBjb25zb2xlLmxvZygnc3RhcnRpbmcgdXBsb2FkLi4uJyk7CiAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldC5maWxlcyk7CiAgICAgIC8vIGltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKICAgICAgY29uc3QgZ2V0Q3JlZGVudGlhbHMgPSAoKSA9PiB7CiAgICAgICAgcmV0dXJuIHVwbG9hZHNDbGllbnQKICAgICAgICAgIC5jcmVhdGVVcGxvYWRDcmVkZW50aWFscygpCiAgICAgICAgICAuc2VuZCgpCiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmJvZHkpOwogICAgICB9OwogICAgICBjb25zdCBwdXRGaWxlT25TMyA9IChjcmVkZW50aWFscykgPT4gewogICAgICAgIGNvbnN0IHMzID0gbmV3IEFXUy5TMyh7CiAgICAgICAgICBhY2Nlc3NLZXlJZDogY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQsCiAgICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwKICAgICAgICAgIHNlc3Npb25Ub2tlbjogY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuLAogICAgICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJywKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gczMKICAgICAgICAgIC5wdXRPYmplY3QoewogICAgICAgICAgICBCdWNrZXQ6IGNyZWRlbnRpYWxzLmJ1Y2tldCwKICAgICAgICAgICAgS2V5OiBjcmVkZW50aWFscy5rZXksCiAgICAgICAgICAgIEJvZHk6IHRoaXMuc2VsZWN0ZWRGaWxlLAogICAgICAgICAgICAvLyBCb2R5OiBmcy5jcmVhdGVSZWFkU3RyZWFtKCcvcGF0aC90by9maWxlLm1idGlsZXMnKQogICAgICAgICAgfSkKICAgICAgICAgIC5wcm9taXNlKCk7CiAgICAgIH07CiAgICAgIC8vIGNvbnNvbGUubG9nKGF3YWl0IGdldENyZWRlbnRpYWxzKCkpOwogICAgICAvLyBsZXQgY3JlZGVudGlhbHMgPSBhd2FpdCBnZXRDcmVkZW50aWFscygpOwogICAgICAvLyBjb25zb2xlLmxvZyhjcmVkZW50aWFscyk7CiAgICAgIC8vIGNyZWRlbnRpYWxzID0gcHV0RmlsZU9uUzMoY3JlZGVudGlhbHMpOwogICAgICAvLyByZXNwb25zZS50aGVuKGNvbnNvbGUubG9nKTsKICAgICAgLy8gcmVzcG9uc2UudGhlbigocmVzKSA9PiBjb25zb2xlLmxvZyhyZXMpKTsKICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCBnZXRDcmVkZW50aWFscygpOwogICAgICBwdXRGaWxlT25TMyhjcmVkZW50aWFscyk7CiAgICAgIGNvbnN0IG15VXNlcm5hbWUgPSAneWlxaW5nZ2dnJzsKICAgICAgY29uc3QgbXlUaWxlc2V0ID0gJ215VGlsZXNldDInOwogICAgICAvLyBjb25zdCBjcmVkZW50aWFscyA9IHVwbG9hZHNDbGllbnQuY3JlYXRlVXBsb2FkQ3JlZGVudGlhbHMoKTsKICAgICAgY29uc29sZS5sb2coY3JlZGVudGlhbHMpOwogICAgICB1cGxvYWRzQ2xpZW50CiAgICAgICAgLmNyZWF0ZVVwbG9hZCh7CiAgICAgICAgICB0aWxlc2V0OiBgJHtteVVzZXJuYW1lfS4ke215VGlsZXNldH1gLAogICAgICAgICAgdXJsOgogICAgICAgICAgICAnaHR0cHM6Ly90aWxlc3RyZWFtLXRpbGVzZXRzLXByb2R1Y3Rpb24uczMuYW1hem9uYXdzLmNvbS9mOS9fcGVuZGluZy9vamR4Yjd0eWtwODJ4MXMzbmNlcXl4dGtjL3lpcWluZ2dnZycsCiAgICAgICAgICBuYW1lOiAnSk1MUSBVUExPQUQxJywKICAgICAgICB9KQogICAgICAgIC5zZW5kKCkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIGNvbnN0IHVwbG9hZCA9IHJlc3BvbnNlLmJvZHk7CiAgICAgICAgICBjb25zb2xlLmxvZyh1cGxvYWQsIHVwbG9hZC50aWxlc2V0KTsKICAgICAgICAgIHRpbGVzZXRpZCA9IHVwbG9hZC50aWxlc2V0OwogICAgICAgICAgLy8gdXBsb2FkSWQgPSByZXNwb25zZS5ib2R5LmlkOwogICAgICAgIH0pOwogICAgICAvLyBhd2FpdCB1cGxvYWRzQ2xpZW50CiAgICAgIC8vICAgLmdldFVwbG9hZCh7CiAgICAgIC8vICAgICB1cGxvYWRJZDogdXBsb2FkSWQsCiAgICAgIC8vICAgfSkKICAgICAgLy8gICAuc2VuZCgpCiAgICAgIC8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgIC8vICAgICBjb25zdCBzdGF0dXMgPSByZXNwb25zZS5ib2R5OwogICAgICAvLyAgICAgY29uc29sZS5sb2coc3RhdHVzKTsKICAgICAgLy8gICB9KTsKICAgICAgY29uc29sZS5sb2coJ2RvbmUnKTsKICAgICAgY29uc3QgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7CiAgICAgICAgY29udGFpbmVyOiAnbWFwLWNvbXBvbmVudCcsIC8vIGNvbnRhaW5lciBJRAogICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsIC8vIHN0eWxlIFVSTAogICAgICAgIGNlbnRlcjogWy0xMjIuMjcyNzgxLCAzNy44NzE2NjZdLCAvLyBzdGFydGluZyBwb3NpdGlvbiBbbG5nLCBsYXRdCiAgICAgICAgem9vbTogMTUsIC8vIHN0YXJ0aW5nIHpvb20KICAgICAgfSk7CiAgICAgIGNvbnNvbGUubG9nKHRpbGVzZXRpZCk7CiAgICAgIG1hcC5vbignbG9hZCcsICgpID0+IHsKICAgICAgICBtYXAuYWRkU291cmNlKCdwYXJrcycsIHsKICAgICAgICAgIHR5cGU6ICd2ZWN0b3InLAogICAgICAgICAgdXJsOiBgbWFwYm94Oi8veWlxaW5nZ2dnLm15VGlsZXNldDJgLAogICAgICAgIH0pOwogICAgICAgIG1hcC5hZGRMYXllcih7CiAgICAgICAgICBpZDogJ3BhcmtzJywKICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgIHNvdXJjZTogJ3BhcmtzJywKICAgICAgICAgICdzb3VyY2UtbGF5ZXInOiAnSk1MUSBVUExPQUQxJywKICAgICAgICAgIGxheW91dDogewogICAgICAgICAgICAvLyBNYWtlIHRoZSBsYXllciB2aXNpYmxlIGJ5IGRlZmF1bHQuCiAgICAgICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJywKICAgICAgICAgICAgJ2xpbmUtam9pbic6ICdyb3VuZCcsCiAgICAgICAgICAgICdsaW5lLWNhcCc6ICdyb3VuZCcsCiAgICAgICAgICB9LAogICAgICAgICAgcGFpbnQ6IHsKICAgICAgICAgICAgJ2xpbmUtY29sb3InOiAnIzg3N2I1OScsCiAgICAgICAgICAgICdsaW5lLXdpZHRoJzogMjAsCiAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICAvLyBhc3luYyBvbkZpbGVQaWNrZWQgKGV2ZW50KSB7CiAgICAvLyAgIGNvbnN0IGZpbGVzID0gZXZlbnQudGFyZ2V0LmZpbGVzCiAgICAvLyAgIGxldCBmaWxlbmFtZSA9IGZpbGVzWzBdLm5hbWUKICAgIC8vICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCkKICAgIC8vICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgLy8gICAgIHRoaXMuaW1hZ2VVcmwgPSBmaWxlUmVhZGVyLnJlc3VsdAogICAgLy8gICB9KQogICAgLy8gICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZXNbMF0pCiAgICAvLyAgIHRoaXMuaW1hZ2UgPSBmaWxlc1swXQogICAgLy8gICBjb25zb2xlLmxvZyhmaWxlbmFtZSk7CiAgICAvLyAgIGF3YWl0IGhhbmRsZUZpbGVTdWJtaXQodGhpcy5pbWFnZSk7CiAgICAvLyB9LAogICAgYXN5bmMgcHJldmlld0ZpbGVzKGV2ZW50KSB7CiAgICAgIHRoaXMuc2VsZWN0ZWRGaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdOwogICAgfSwKICAgIGhhbmRsZVN1Ym1pdCgpIHsKICAgICAgY29uc29sZS5sb2coJ3Rlc3RpbmcgaGFuZGxlU3VibWl0Jyk7CiAgICAgIHRoaXMuc3VibWl0dGluZyA9IHRydWU7CiAgICAgIHRoaXMuY2xlYXJTdGF0dXMoKTsKICAgICAgaWYgKHRoaXMuaW52YWxpZE5hbWUgfHwgdGhpcy5pbnZhbGlkRW1haWwpIHsKICAgICAgICB0aGlzLmVycm9yID0gdHJ1ZTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy4kZW1pdCgnYWRkOmVtcGxveWVlJywgdGhpcy5lbXBsb3llZSk7CiAgICAgIHRoaXMuJHJlZnMuZmlyc3QuZm9jdXMoKTsKICAgICAgdGhpcy5lbXBsb3llZSA9IHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBlbWFpbDogJycsCiAgICAgIH07CiAgICAgIHRoaXMuZXJyb3IgPSBmYWxzZTsKICAgICAgdGhpcy5zdWNjZXNzID0gdHJ1ZTsKICAgICAgdGhpcy5zdWJtaXR0aW5nID0gZmFsc2U7CiAgICB9LAogICAgY2xlYXJTdGF0dXMoKSB7CiAgICAgIHRoaXMuc3VjY2VzcyA9IGZhbHNlOwogICAgICB0aGlzLmVycm9yID0gZmFsc2U7CiAgICB9LAogIH0sCn07Ci8vICAgZXhwb3J0IGRlZmF1bHQgewovLyAgICAgbmFtZTogJ2VtcGxveWVlLWZvcm0nLAovLyAgICAgZGF0YSgpIHsKLy8gICAgICAgcmV0dXJuIHsKLy8gICAgICAgICBlbXBsb3llZTogewovLyAgICAgICAgICAgbmFtZTogJycsCi8vICAgICAgICAgICBlbWFpbDogJycsCi8vICAgICAgICAgfSwKLy8gICAgICAgfQovLyAgICAgfSwKLy8gICAgIG1ldGhvZHM6IHsKLy8gICAgICAgICBoYW5kbGVTdWJtaXQoKSB7Ci8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0ZXN0aW5nIGhhbmRsZVN1Ym1pdCcpCi8vICAgICAgICAgfSwKLy8gICAgIH0sCi8vICAgfQo="},{"version":3,"sources":["EmployeeForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"EmployeeForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"employee-form\">\n    <label>Shapefile upload</label>\n    <!-- <form @submit.prevent=\"checkUploadStatus\">\n      <button>Check</button>\n    </form> -->\n    <form\n      class=\"upload\"\n      @submit.prevent=\"handleFileSubmit\"\n      @change=\"previewFiles\"\n    >\n      <label>File Name</label>\n      <!-- <input type=\"text\" /> -->\n      <input v-model=\"shapefiles.name\" type=\"text\" />\n      <input type=\"file\" name=\"uploadFile\" accept=\".zip\" required />\n      <br /><br />\n      <input type=\"submit\" />\n    </form>\n    <div id=\"map-component\" />\n  </div>\n</template>\n\n<script>\nlet tilesetid;\nconst MY_ACCESS_TOKEN =\n  'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhma3ZiYzBrMXQybnRoemFkOTlhMW4ifQ.Fe0XhvYKsc5A9MmE8xD7OQ';\nconst mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\nconst mbxClient = require('@mapbox/mapbox-sdk');\nconst baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\nconst uploadsClient = mbxUploads(baseClient);\n// let uploadId;\nimport mapboxgl from 'mapbox-gl';\nconst AWS = require('aws-sdk');\nmapboxgl.accessToken =\n  'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHkwM2w1cTJ5dWgydnBtdWx4MXFlN3EifQ.WoSz2Zn-h7SkdDmouxC0XQ';\nexport default {\n  name: 'employee-form',\n  data() {\n    return {\n      submiting: false,\n      error: false,\n      success: false,\n      shapefiles: {\n        name: '',\n        id: '',\n      },\n      selectedFile: null,\n    };\n  },\n  methods: {\n    async onPickFile() {\n      this.$refs.fileInput.click();\n    },\n    // async checkUploadStatus() {\n    //   await uploadsClient\n    //     .getUpload({\n    //       uploadId: uploadId,\n    //     })\n    //     .send()\n    //     .then((response) => {\n    //       const status = response.body;\n    //       console.log(status);\n    //     });\n    // },\n    async handleFileSubmit() {\n      console.log('starting upload...');\n      // console.log(event.target.files);\n      // import * as fs from 'fs';\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.selectedFile,\n            // Body: fs.createReadStream('/path/to/file.mbtiles')\n          })\n          .promise();\n      };\n      // console.log(await getCredentials());\n      // let credentials = await getCredentials();\n      // console.log(credentials);\n      // credentials = putFileOnS3(credentials);\n      // response.then(console.log);\n      // response.then((res) => console.log(res));\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      const myUsername = 'yiqingggg';\n      const myTileset = 'myTileset2';\n      // const credentials = uploadsClient.createUploadCredentials();\n      console.log(credentials);\n      uploadsClient\n        .createUpload({\n          tileset: `${myUsername}.${myTileset}`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/f9/_pending/ojdxb7tykp82x1s3nceqyxtkc/yiqingggg',\n          name: 'JMLQ UPLOAD1',\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload, upload.tileset);\n          tilesetid = upload.tileset;\n          // uploadId = response.body.id;\n        });\n      // await uploadsClient\n      //   .getUpload({\n      //     uploadId: uploadId,\n      //   })\n      //   .send()\n      //   .then((response) => {\n      //     const status = response.body;\n      //     console.log(status);\n      //   });\n      console.log('done');\n      const map = new mapboxgl.Map({\n        container: 'map-component', // container ID\n        style: 'mapbox://styles/mapbox/streets-v11', // style URL\n        center: [-122.272781, 37.871666], // starting position [lng, lat]\n        zoom: 15, // starting zoom\n      });\n      console.log(tilesetid);\n      map.on('load', () => {\n        map.addSource('parks', {\n          type: 'vector',\n          url: `mapbox://yiqingggg.myTileset2`,\n        });\n        map.addLayer({\n          id: 'parks',\n          type: 'line',\n          source: 'parks',\n          'source-layer': 'JMLQ UPLOAD1',\n          layout: {\n            // Make the layer visible by default.\n            visibility: 'visible',\n            'line-join': 'round',\n            'line-cap': 'round',\n          },\n          paint: {\n            'line-color': '#877b59',\n            'line-width': 20,\n          },\n        });\n      });\n    },\n    // async onFilePicked (event) {\n    //   const files = event.target.files\n    //   let filename = files[0].name\n    //   const fileReader = new FileReader()\n    //   fileReader.addEventListener('load', () => {\n    //     this.imageUrl = fileReader.result\n    //   })\n    //   fileReader.readAsDataURL(files[0])\n    //   this.image = files[0]\n    //   console.log(filename);\n    //   await handleFileSubmit(this.image);\n    // },\n    async previewFiles(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    handleSubmit() {\n      console.log('testing handleSubmit');\n      this.submitting = true;\n      this.clearStatus();\n      if (this.invalidName || this.invalidEmail) {\n        this.error = true;\n        return;\n      }\n      this.$emit('add:employee', this.employee);\n      this.$refs.first.focus();\n      this.employee = {\n        name: '',\n        email: '',\n      };\n      this.error = false;\n      this.success = true;\n      this.submitting = false;\n    },\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n  },\n};\n//   export default {\n//     name: 'employee-form',\n//     data() {\n//       return {\n//         employee: {\n//           name: '',\n//           email: '',\n//         },\n//       }\n//     },\n//     methods: {\n//         handleSubmit() {\n//             console.log('testing handleSubmit')\n//         },\n//     },\n//   }\n</script>\n\n<style scoped>\nform {\n  margin-bottom: 2rem;\n}\n[class*='-message'] {\n  font-weight: 500;\n}\n.error-message {\n  color: #d33c40;\n}\n.success-message {\n  color: #32a95d;\n}\n</style>\n"]}]}