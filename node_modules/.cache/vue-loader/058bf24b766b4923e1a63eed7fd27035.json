{"remainingRequest":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue","mtime":1632439114557},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/css-loader/dist/cjs.js","mtime":1623991179493},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1631742056592},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/postcss-loader/src/index.js","mtime":1623386772312},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js","mtime":1631742056592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmJvZHkgewogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwp9CiNtYXAgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgYm90dG9tOiAwOwogIHdpZHRoOiAxMDAlOwp9CmJ1dHRvbiB7CiAgYmFja2dyb3VuZDogIzAwOTQzNTsKICBib3JkZXI6IDFweCBzb2xpZCAjMDA5NDM1Owp9Cgouc21hbGwtY29udGFpbmVyIHsKICBtYXgtd2lkdGg6IDY4MHB4Owp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <h1>Visualize a Shapefile from Berkeley</h1>\n    <employee-form @add:shapefile=\"createUpload\" />\n    <employee-table\n      :employees=\"employees\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n    <map-component />\n  </div>\n</template>\n\n<script>\nimport dotenv from 'dotenv';\n\n// import mapboxgl from 'mapbox-gl'; // or \"const mapboxgl = require('mapbox-gl');\"\n\n// mapboxgl.accessToken =\n//   'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhmY2hpMzBqemEybnRobWl1enBza3oifQ.dFwEcCgHZuW6IdqjLu4DnA';\n// new mapboxgl.Map({\n//   container: 'map', // container ID\n//   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n//   center: [-74.5, 40], // starting position [lng, lat]\n//   zoom: 9, // starting zoom\n// });\n\ndotenv.config();\nimport EmployeeTable from '@/components/EmployeeTable.vue';\nimport EmployeeForm from '@/components/EmployeeForm.vue';\nimport MapComponent from '@/components/MapComponent.vue';\nexport default {\n  name: 'app',\n  components: {\n    EmployeeTable,\n    EmployeeForm,\n    MapComponent,\n  },\n  data() {\n    return {\n      shapefiles: [\n        {\n          id: 1,\n          name: 'Richard Hendricks',\n          file: 'richard@piedpiper.com',\n        },\n        {\n          id: 2,\n          name: 'Bertram Gilfoyle',\n          file: 'gilfoyle@piedpiper.com',\n        },\n        {\n          id: 3,\n          name: 'Dinesh Chugtai',\n          file: 'dinesh@piedpiper.com',\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.getEmployees();\n  },\n  methods: {\n    async addShapefile(file) {\n      try {\n        const response = await fetch(\n          'https://api.mapbox.com/uploads/v1/yiqingggg/credentials?access_token=sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g',\n          {\n            method: 'POST',\n            body: JSON.stringify(file),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        console.log(data, 'hiii this is the data');\n        return data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // async stageShapefile(file) {\n    //   try {\n    //     const response = await fetch(\n    //       `http://${credentials.bucket}.s3.amazonaws.com/${credentials.key}`,\n    //       {\n    //         method: 'PUT',\n    //         body: JSON.stringify(file),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     console.log(data, 'hiii this is the data');\n    //     return data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async createFileUpload(file) {\n    //   try {\n    //     console.log(file)\n    //     const MY_ACCESS_TOKEN = 'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g';\n    //     const mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\n    //     const mbxClient = require('@mapbox/mapbox-sdk');\n    //     const baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\n    //     const uploadsClient = mbxUploads(baseClient);\n\n    //     const AWS = require('aws-sdk');\n    //     const getCredentials = () => {\n    //         return uploadsClient\n    //           .createUploadCredentials()\n    //           .send()\n    //           .then(response => response.body);\n    //     }\n    //     const putFileOnS3 = (credentials) => {\n    //     const s3 = new AWS.S3({\n    //     accessKeyId: credentials.accessKeyId,\n    //     secretAccessKey: credentials.secretAccessKey,\n    //     sessionToken: credentials.sessionToken,\n    //     region: 'us-east-1'\n    //   });\n    //   return s3.putObject({\n    //     Bucket: credentials.bucket,\n    //     Key: credentials.key,\n    //     Body: this.file,\n    //   }).promise();\n    // };\n\n    // const credentials = await getCredentials();\n    // putFileOnS3(credentials);\n    // // const myUsername = 'yiqingggg';\n    // // const myTileset = 'myTileset';\n\n    // uploadsClient.createUpload({\n    //     tileset: `yiqingggg.myTileset`,\n    //     url: credentials.url,\n    //     name: `${this.file.name}`,\n    //   })\n    //     .send()\n    //     .then(response => {\n    //       const upload = response.body;\n    //       console.log(upload);\n    //     });\n    //   console.log('done')\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    async deleteEmployee(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: 'DELETE',\n        });\n        this.employees = this.employees.filter(\n          (employee) => employee.id !== id\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async editEmployee(id, updatedEmployee) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          {\n            method: 'PUT',\n            body: JSON.stringify(updatedEmployee),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        this.employees = this.employees.map((employee) =>\n          employee.id === id ? data : employee\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getEmployees() {\n      try {\n        const response = await fetch(\n          'https://jsonplaceholder.typicode.com/users'\n        );\n        const data = await response.json();\n        this.employees = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n\n<style>\nbody {\n  margin: 0;\n  padding: 0;\n}\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n\n.small-container {\n  max-width: 680px;\n}\n</style>\n"]}]}