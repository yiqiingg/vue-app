{"remainingRequest":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/vue-app/src/components/EmployeeForm.vue?vue&type=style&index=0&id=81b3487c&scoped=true&lang=css&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/vue-app/src/components/EmployeeForm.vue","mtime":1632434984851},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/css-loader/dist/cjs.js","mtime":1623991179493},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1631742056592},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/postcss-loader/src/index.js","mtime":1623386772312},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js","mtime":1631742056592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpmb3JtIHsKICBtYXJnaW4tYm90dG9tOiAycmVtOwp9CgpbY2xhc3MqPSctbWVzc2FnZSddIHsKICBmb250LXdlaWdodDogNTAwOwp9CgouZXJyb3ItbWVzc2FnZSB7CiAgY29sb3I6ICNkMzNjNDA7Cn0KCi5zdWNjZXNzLW1lc3NhZ2UgewogIGNvbG9yOiAjMzJhOTVkOwp9Cg=="},{"version":3,"sources":["EmployeeForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"EmployeeForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"employee-form\">\n    <form @submit.prevent=\"createFileUpload\">\n      <label>Shapefile name</label>\n      <input v-model=\"shapefile.name\" type=\"text\" />\n      <label>Upload Shapefile</label>\n      <input type=\"file\" @change=\"uploadFileSave\" name=\"uploadFile\" required />\n      <p v-if=\"error && submitting\" class=\"error-message\">\n        ❗Please fill out all required fields\n      </p>\n      <p v-if=\"success\" class=\"success-message\">\n        ✅ File successfully added\n      </p>\n      <button>Add File</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'employee-form',\n  data() {\n    return {\n      submitting: false,\n      error: false,\n      success: false,\n      shapefile: {\n        name: '',\n        file: '',\n      },\n    };\n  },\n  computed: {\n    invalidName() {\n      console.log(this.shapefile.name);\n      return this.shapefile.name === '';\n    },\n  },\n  methods: {\n    uploadFileSave(event) {\n      console.log(event.target.files[0]);\n      this.shapefile.file = event.target.files[0];\n    },\n    async createFileUpload() {\n      console.log(this.shapefile);\n      this.submitting = true;\n      this.clearStatus();\n      const MY_ACCESS_TOKEN =\n        'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhma3ZiYzBrMXQybnRoemFkOTlhMW4ifQ.Fe0XhvYKsc5A9MmE8xD7OQ';\n      const mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\n      const mbxClient = require('@mapbox/mapbox-sdk');\n      const baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\n      const uploadsClient = mbxUploads(baseClient);\n\n      const AWS = require('aws-sdk');\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      this.shapefile = {\n        name: '',\n        file: '',\n      };\n      this.error = false;\n      this.success = true;\n      this.submitting = false;\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.shapefile.file,\n          })\n          .promise();\n      };\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      console.log(credentials);\n      // const myUsername = 'yiqingggg';\n      // const myTileset = 'myTileset';\n\n      await uploadsClient\n        .createUpload({\n          tileset: `yiqingggg.myTileset`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/80/_pending/fkfic8hpqn72iph132jlfxtkc/yiqingggg',\n          name: `test`,\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload);\n        });\n      console.log('done');\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\nform {\n  margin-bottom: 2rem;\n}\n\n[class*='-message'] {\n  font-weight: 500;\n}\n\n.error-message {\n  color: #d33c40;\n}\n\n.success-message {\n  color: #32a95d;\n}\n</style>\n"]}]}