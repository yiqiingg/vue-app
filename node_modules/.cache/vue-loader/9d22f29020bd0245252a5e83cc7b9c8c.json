{"remainingRequest":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/vue-app/src/components/EmployeeForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/vue-app/src/components/EmployeeForm.vue","mtime":1632382251282},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/babel-loader/lib/index.js","mtime":1623991178718},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js","mtime":1631742056592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnZW1wbG95ZWUtZm9ybScsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHN1Ym1pdHRpbmc6IGZhbHNlLAogICAgICBlcnJvcjogZmFsc2UsCiAgICAgIHN1Y2Nlc3M6IGZhbHNlLAogICAgICBzaGFwZWZpbGU6IHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBmaWxlOiAnJywKICAgICAgfSwKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgaW52YWxpZE5hbWUoKSB7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2hhcGVmaWxlLm5hbWUpOwogICAgICByZXR1cm4gdGhpcy5zaGFwZWZpbGUubmFtZSA9PT0gJyc7CiAgICB9LAogIH0sCiAgbWV0aG9kczogewogICAgdXBsb2FkRmlsZVNhdmUoZXZlbnQpewogICAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQuZmlsZXNbMF0pCiAgICAgIHRoaXMuc2hhcGVmaWxlLmZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF0KICAgIH0sCiAgICBhc3luYyBjcmVhdGVGaWxlVXBsb2FkKCkgewogICAgICBjb25zb2xlLmxvZyh0aGlzLnNoYXBlZmlsZSkKICAgICAgdGhpcy5zdWJtaXR0aW5nID0gdHJ1ZTsKICAgICAgdGhpcy5jbGVhclN0YXR1cygpOwogICAgICAgIGNvbnN0IE1ZX0FDQ0VTU19UT0tFTiA9ICdzay5leUoxSWpvaWVXbHhhVzVuWjJkbklpd2lZU0k2SW1OcmRHNTFNWE0zT1RBMk9XNHpNSEE1ZERabWRqVm9aVFVpZlEucTJkeG13QVFqazlmZzlMQUJqVTk3Zyc7CiAgICAgICAgY29uc3QgbWJ4VXBsb2FkcyA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkay9zZXJ2aWNlcy91cGxvYWRzJyk7CiAgICAgICAgY29uc3QgbWJ4Q2xpZW50ID0gcmVxdWlyZSgnQG1hcGJveC9tYXBib3gtc2RrJyk7CiAgICAgICAgY29uc3QgYmFzZUNsaWVudCA9IG1ieENsaWVudCh7IGFjY2Vzc1Rva2VuOiBNWV9BQ0NFU1NfVE9LRU4gfSk7CiAgICAgICAgY29uc3QgdXBsb2Fkc0NsaWVudCA9IG1ieFVwbG9hZHMoYmFzZUNsaWVudCk7CgogICAgICAgIGNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTsKICAgICAgICBjb25zdCBnZXRDcmVkZW50aWFscyA9ICgpID0+IHsKICAgICAgICAgICAgcmV0dXJuIHVwbG9hZHNDbGllbnQKICAgICAgICAgICAgICAuY3JlYXRlVXBsb2FkQ3JlZGVudGlhbHMoKQogICAgICAgICAgICAgIC5zZW5kKCkKICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5ib2R5KTsKICAgICAgICB9CiAgICAgIHRoaXMuc2hhcGVmaWxlID0gewogICAgICAgIG5hbWU6ICcnLAogICAgICAgIGZpbGU6ICcnLAogICAgICB9OwogICAgICB0aGlzLmVycm9yID0gZmFsc2U7CiAgICAgIHRoaXMuc3VjY2VzcyA9IHRydWU7CiAgICAgIHRoaXMuc3VibWl0dGluZyA9IGZhbHNlOwogICAgICAgIGNvbnN0IHB1dEZpbGVPblMzID0gKGNyZWRlbnRpYWxzKSA9PiB7CiAgICAgICAgY29uc3QgczMgPSBuZXcgQVdTLlMzKHsKICAgICAgICBhY2Nlc3NLZXlJZDogY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQsCiAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiBjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksCiAgICAgICAgc2Vzc2lvblRva2VuOiBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4sCiAgICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJwogICAgICB9KTsKICAgICAgcmV0dXJuIHMzLnB1dE9iamVjdCh7CiAgICAgICAgQnVja2V0OiBjcmVkZW50aWFscy5idWNrZXQsCiAgICAgICAgS2V5OiBjcmVkZW50aWFscy5rZXksCiAgICAgICAgQm9keTogdGhpcy5zaGFwZWZpbGUuZmlsZSwKICAgICAgfSkucHJvbWlzZSgpOwogICAgfTsKICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCBnZXRDcmVkZW50aWFscygpOwogICAgICBwdXRGaWxlT25TMyhjcmVkZW50aWFscyk7CiAgICAgIGNvbnNvbGUubG9nKGNyZWRlbnRpYWxzKQogICAgLy8gY29uc3QgbXlVc2VybmFtZSA9ICd5aXFpbmdnZ2cnOwogICAgLy8gY29uc3QgbXlUaWxlc2V0ID0gJ215VGlsZXNldCc7CgogICAgICB1cGxvYWRzQ2xpZW50LmNyZWF0ZVVwbG9hZCh7CiAgICAgICAgdGlsZXNldDogYHlpcWluZ2dnZy5teVRpbGVzZXRgLAogICAgICAgIHVybDogY3JlZGVudGlhbHMudXJsLAogICAgICAgIG5hbWU6IGB0ZXN0YCwKICAgICAgfSkKICAgICAgICAuc2VuZCgpCiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgY29uc3QgdXBsb2FkID0gcmVzcG9uc2UuYm9keTsKICAgICAgICAgIGNvbnNvbGUubG9nKHVwbG9hZCk7CiAgICAgICAgfSk7CiAgICAgIGNvbnNvbGUubG9nKCdkb25lJykKICAgIH0sCgogICAgY2xlYXJTdGF0dXMoKSB7CiAgICAgIHRoaXMuc3VjY2VzcyA9IGZhbHNlOwogICAgICB0aGlzLmVycm9yID0gZmFsc2U7CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["EmployeeForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"EmployeeForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"employee-form\">\n    <form @submit.prevent=\"createFileUpload\">\n      <label>Shapefile name</label>\n      <input v-model=\"shapefile.name\" type=\"text\" />\n      <label>Upload Shapefile</label>\n      <input\n        type=\"file\"\n        @change=\"uploadFileSave\"\n        name=\"uploadFile\"\n        required\n      />\n      <p v-if=\"error && submitting\" class=\"error-message\">\n        ❗Please fill out all required fields\n      </p>\n      <p v-if=\"success\" class=\"success-message\">\n        ✅ File successfully added\n      </p>\n      <button>Add File</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'employee-form',\n  data() {\n    return {\n      submitting: false,\n      error: false,\n      success: false,\n      shapefile: {\n        name: '',\n        file: '',\n      },\n    };\n  },\n  computed: {\n    invalidName() {\n      console.log(this.shapefile.name);\n      return this.shapefile.name === '';\n    },\n  },\n  methods: {\n    uploadFileSave(event){\n      console.log(event.target.files[0])\n      this.shapefile.file = event.target.files[0]\n    },\n    async createFileUpload() {\n      console.log(this.shapefile)\n      this.submitting = true;\n      this.clearStatus();\n        const MY_ACCESS_TOKEN = 'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g';\n        const mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\n        const mbxClient = require('@mapbox/mapbox-sdk');\n        const baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\n        const uploadsClient = mbxUploads(baseClient);\n\n        const AWS = require('aws-sdk');\n        const getCredentials = () => {\n            return uploadsClient\n              .createUploadCredentials()\n              .send()\n              .then(response => response.body);\n        }\n      this.shapefile = {\n        name: '',\n        file: '',\n      };\n      this.error = false;\n      this.success = true;\n      this.submitting = false;\n        const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n        accessKeyId: credentials.accessKeyId,\n        secretAccessKey: credentials.secretAccessKey,\n        sessionToken: credentials.sessionToken,\n        region: 'us-east-1'\n      });\n      return s3.putObject({\n        Bucket: credentials.bucket,\n        Key: credentials.key,\n        Body: this.shapefile.file,\n      }).promise();\n    };\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      console.log(credentials)\n    // const myUsername = 'yiqingggg';\n    // const myTileset = 'myTileset';\n\n      uploadsClient.createUpload({\n        tileset: `yiqingggg.myTileset`,\n        url: credentials.url,\n        name: `test`,\n      })\n        .send()\n        .then(response => {\n          const upload = response.body;\n          console.log(upload);\n        });\n      console.log('done')\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\nform {\n  margin-bottom: 2rem;\n}\n\n[class*='-message'] {\n  font-weight: 500;\n}\n\n.error-message {\n  color: #d33c40;\n}\n\n.success-message {\n  color: #32a95d;\n}\n</style>\n"]}]}