{"remainingRequest":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue","mtime":1632378239742},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/babel-loader/lib/index.js","mtime":1623991178718},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js","mtime":1631742056592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JzsKCmRvdGVudi5jb25maWcoKTsKaW1wb3J0IEVtcGxveWVlVGFibGUgZnJvbSAnQC9jb21wb25lbnRzL0VtcGxveWVlVGFibGUudnVlJzsKaW1wb3J0IEVtcGxveWVlRm9ybSBmcm9tICdAL2NvbXBvbmVudHMvRW1wbG95ZWVGb3JtLnZ1ZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnYXBwJywKICBjb21wb25lbnRzOiB7CiAgICBFbXBsb3llZVRhYmxlLAogICAgRW1wbG95ZWVGb3JtLAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNoYXBlZmlsZXM6IFsKICAgICAgICB7CiAgICAgICAgICBpZDogMSwKICAgICAgICAgIG5hbWU6ICdSaWNoYXJkIEhlbmRyaWNrcycsCiAgICAgICAgICBmaWxlOiAncmljaGFyZEBwaWVkcGlwZXIuY29tJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGlkOiAyLAogICAgICAgICAgbmFtZTogJ0JlcnRyYW0gR2lsZm95bGUnLAogICAgICAgICAgZmlsZTogJ2dpbGZveWxlQHBpZWRwaXBlci5jb20nLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgaWQ6IDMsCiAgICAgICAgICBuYW1lOiAnRGluZXNoIENodWd0YWknLAogICAgICAgICAgZmlsZTogJ2RpbmVzaEBwaWVkcGlwZXIuY29tJywKICAgICAgICB9LAogICAgICBdLAogICAgfTsKICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLmdldEVtcGxveWVlcygpOwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgYWRkU2hhcGVmaWxlKGZpbGUpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKAogICAgICAgICAgJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20vdXBsb2Fkcy92MS95aXFpbmdnZ2cvY3JlZGVudGlhbHM/YWNjZXNzX3Rva2VuPXNrLmV5SjFJam9pZVdseGFXNW5aMmRuSWl3aVlTSTZJbU5yZEc1MU1YTTNPVEEyT1c0ek1IQTVkRFptZGpWb1pUVWlmUS5xMmR4bXdBUWprOWZnOUxBQmpVOTdnJywKICAgICAgICAgIHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZpbGUpLAogICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcgfSwKICAgICAgICAgIH0KICAgICAgICApOwogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgICAgY29uc29sZS5sb2coZGF0YSwgJ2hpaWkgdGhpcyBpcyB0aGUgZGF0YScpOwogICAgICAgIHJldHVybiBkYXRhOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICB9CiAgICB9LAogICAgLy8gYXN5bmMgc3RhZ2VTaGFwZWZpbGUoZmlsZSkgewogICAgLy8gICB0cnkgewogICAgLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goCiAgICAvLyAgICAgICBgaHR0cDovLyR7Y3JlZGVudGlhbHMuYnVja2V0fS5zMy5hbWF6b25hd3MuY29tLyR7Y3JlZGVudGlhbHMua2V5fWAsCiAgICAvLyAgICAgICB7CiAgICAvLyAgICAgICAgIG1ldGhvZDogJ1BVVCcsCiAgICAvLyAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZpbGUpLAogICAgLy8gICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcgfSwKICAgIC8vICAgICAgIH0KICAgIC8vICAgICApOwogICAgLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAvLyAgICAgY29uc29sZS5sb2coZGF0YSwgJ2hpaWkgdGhpcyBpcyB0aGUgZGF0YScpOwogICAgLy8gICAgIHJldHVybiBkYXRhOwogICAgLy8gICB9IGNhdGNoIChlcnJvcikgewogICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgLy8gICB9CiAgICAvLyB9LAogICAgLy8gYXN5bmMgY3JlYXRlRmlsZVVwbG9hZChmaWxlKSB7CiAgICAvLyAgIHRyeSB7CiAgICAvLyAgICAgY29uc29sZS5sb2coZmlsZSkKICAgIC8vICAgICBjb25zdCBNWV9BQ0NFU1NfVE9LRU4gPSAnc2suZXlKMUlqb2llV2x4YVc1bloyZG5JaXdpWVNJNkltTnJkRzUxTVhNM09UQTJPVzR6TUhBNWREWm1kalZvWlRVaWZRLnEyZHhtd0FRams5Zmc5TEFCalU5N2cnOwogICAgLy8gICAgIGNvbnN0IG1ieFVwbG9hZHMgPSByZXF1aXJlKCdAbWFwYm94L21hcGJveC1zZGsvc2VydmljZXMvdXBsb2FkcycpOwogICAgLy8gICAgIGNvbnN0IG1ieENsaWVudCA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkaycpOwogICAgLy8gICAgIGNvbnN0IGJhc2VDbGllbnQgPSBtYnhDbGllbnQoeyBhY2Nlc3NUb2tlbjogTVlfQUNDRVNTX1RPS0VOIH0pOwogICAgLy8gICAgIGNvbnN0IHVwbG9hZHNDbGllbnQgPSBtYnhVcGxvYWRzKGJhc2VDbGllbnQpOwoKICAgIC8vICAgICBjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7CiAgICAvLyAgICAgY29uc3QgZ2V0Q3JlZGVudGlhbHMgPSAoKSA9PiB7CiAgICAvLyAgICAgICAgIHJldHVybiB1cGxvYWRzQ2xpZW50CiAgICAvLyAgICAgICAgICAgLmNyZWF0ZVVwbG9hZENyZWRlbnRpYWxzKCkKICAgIC8vICAgICAgICAgICAuc2VuZCgpCiAgICAvLyAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYm9keSk7CiAgICAvLyAgICAgfQogICAgLy8gICAgIGNvbnN0IHB1dEZpbGVPblMzID0gKGNyZWRlbnRpYWxzKSA9PiB7CiAgICAvLyAgICAgY29uc3QgczMgPSBuZXcgQVdTLlMzKHsKICAgIC8vICAgICBhY2Nlc3NLZXlJZDogY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQsCiAgICAvLyAgICAgc2VjcmV0QWNjZXNzS2V5OiBjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksCiAgICAvLyAgICAgc2Vzc2lvblRva2VuOiBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4sCiAgICAvLyAgICAgcmVnaW9uOiAndXMtZWFzdC0xJwogICAgLy8gICB9KTsKICAgIC8vICAgcmV0dXJuIHMzLnB1dE9iamVjdCh7CiAgICAvLyAgICAgQnVja2V0OiBjcmVkZW50aWFscy5idWNrZXQsCiAgICAvLyAgICAgS2V5OiBjcmVkZW50aWFscy5rZXksCiAgICAvLyAgICAgQm9keTogdGhpcy5maWxlLAogICAgLy8gICB9KS5wcm9taXNlKCk7CiAgICAvLyB9OwoKICAgIC8vIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgZ2V0Q3JlZGVudGlhbHMoKTsKICAgIC8vIHB1dEZpbGVPblMzKGNyZWRlbnRpYWxzKTsKICAgIC8vIC8vIGNvbnN0IG15VXNlcm5hbWUgPSAneWlxaW5nZ2dnJzsKICAgIC8vIC8vIGNvbnN0IG15VGlsZXNldCA9ICdteVRpbGVzZXQnOwoKICAgIC8vIHVwbG9hZHNDbGllbnQuY3JlYXRlVXBsb2FkKHsKICAgIC8vICAgICB0aWxlc2V0OiBgeWlxaW5nZ2dnLm15VGlsZXNldGAsCiAgICAvLyAgICAgdXJsOiBjcmVkZW50aWFscy51cmwsCiAgICAvLyAgICAgbmFtZTogYCR7dGhpcy5maWxlLm5hbWV9YCwKICAgIC8vICAgfSkKICAgIC8vICAgICAuc2VuZCgpCiAgICAvLyAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgLy8gICAgICAgY29uc3QgdXBsb2FkID0gcmVzcG9uc2UuYm9keTsKICAgIC8vICAgICAgIGNvbnNvbGUubG9nKHVwbG9hZCk7CiAgICAvLyAgICAgfSk7CiAgICAvLyAgIGNvbnNvbGUubG9nKCdkb25lJykKICAgIC8vICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIC8vICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgIC8vICAgfSAKICAgIC8vIH0sCiAgICBhc3luYyBkZWxldGVFbXBsb3llZShpZCkgewogICAgICB0cnkgewogICAgICAgIGF3YWl0IGZldGNoKGBodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdXNlcnMvJHtpZH1gLCB7CiAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgIH0pOwogICAgICAgIHRoaXMuZW1wbG95ZWVzID0gdGhpcy5lbXBsb3llZXMuZmlsdGVyKAogICAgICAgICAgKGVtcGxveWVlKSA9PiBlbXBsb3llZS5pZCAhPT0gaWQKICAgICAgICApOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICB9CiAgICB9LAogICAgYXN5bmMgZWRpdEVtcGxveWVlKGlkLCB1cGRhdGVkRW1wbG95ZWUpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKAogICAgICAgICAgYGh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2Vycy8ke2lkfWAsCiAgICAgICAgICB7CiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRFbXBsb3llZSksCiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyB9LAogICAgICAgICAgfQogICAgICAgICk7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgICB0aGlzLmVtcGxveWVlcyA9IHRoaXMuZW1wbG95ZWVzLm1hcCgoZW1wbG95ZWUpID0+CiAgICAgICAgICBlbXBsb3llZS5pZCA9PT0gaWQgPyBkYXRhIDogZW1wbG95ZWUKICAgICAgICApOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICB9CiAgICB9LAogICAgYXN5bmMgZ2V0RW1wbG95ZWVzKCkgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goCiAgICAgICAgICAnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzJwogICAgICAgICk7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgICB0aGlzLmVtcGxveWVlcyA9IGRhdGE7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgIH0KICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <h1>Visualize a Shapefile from Berkeley</h1>\n    <employee-form @add:shapefile=\"createUpload\" />\n    <employee-table\n      :employees=\"employees\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n  </div>\n</template>\n\n<script>\nimport dotenv from 'dotenv';\n\ndotenv.config();\nimport EmployeeTable from '@/components/EmployeeTable.vue';\nimport EmployeeForm from '@/components/EmployeeForm.vue';\nexport default {\n  name: 'app',\n  components: {\n    EmployeeTable,\n    EmployeeForm,\n  },\n  data() {\n    return {\n      shapefiles: [\n        {\n          id: 1,\n          name: 'Richard Hendricks',\n          file: 'richard@piedpiper.com',\n        },\n        {\n          id: 2,\n          name: 'Bertram Gilfoyle',\n          file: 'gilfoyle@piedpiper.com',\n        },\n        {\n          id: 3,\n          name: 'Dinesh Chugtai',\n          file: 'dinesh@piedpiper.com',\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.getEmployees();\n  },\n  methods: {\n    async addShapefile(file) {\n      try {\n        const response = await fetch(\n          'https://api.mapbox.com/uploads/v1/yiqingggg/credentials?access_token=sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g',\n          {\n            method: 'POST',\n            body: JSON.stringify(file),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        console.log(data, 'hiii this is the data');\n        return data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // async stageShapefile(file) {\n    //   try {\n    //     const response = await fetch(\n    //       `http://${credentials.bucket}.s3.amazonaws.com/${credentials.key}`,\n    //       {\n    //         method: 'PUT',\n    //         body: JSON.stringify(file),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     console.log(data, 'hiii this is the data');\n    //     return data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async createFileUpload(file) {\n    //   try {\n    //     console.log(file)\n    //     const MY_ACCESS_TOKEN = 'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g';\n    //     const mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\n    //     const mbxClient = require('@mapbox/mapbox-sdk');\n    //     const baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\n    //     const uploadsClient = mbxUploads(baseClient);\n\n    //     const AWS = require('aws-sdk');\n    //     const getCredentials = () => {\n    //         return uploadsClient\n    //           .createUploadCredentials()\n    //           .send()\n    //           .then(response => response.body);\n    //     }\n    //     const putFileOnS3 = (credentials) => {\n    //     const s3 = new AWS.S3({\n    //     accessKeyId: credentials.accessKeyId,\n    //     secretAccessKey: credentials.secretAccessKey,\n    //     sessionToken: credentials.sessionToken,\n    //     region: 'us-east-1'\n    //   });\n    //   return s3.putObject({\n    //     Bucket: credentials.bucket,\n    //     Key: credentials.key,\n    //     Body: this.file,\n    //   }).promise();\n    // };\n\n    // const credentials = await getCredentials();\n    // putFileOnS3(credentials);\n    // // const myUsername = 'yiqingggg';\n    // // const myTileset = 'myTileset';\n\n    // uploadsClient.createUpload({\n    //     tileset: `yiqingggg.myTileset`,\n    //     url: credentials.url,\n    //     name: `${this.file.name}`,\n    //   })\n    //     .send()\n    //     .then(response => {\n    //       const upload = response.body;\n    //       console.log(upload);\n    //     });\n    //   console.log('done')\n    //   } catch (error) {\n    //     console.error(error);\n    //   } \n    // },\n    async deleteEmployee(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: 'DELETE',\n        });\n        this.employees = this.employees.filter(\n          (employee) => employee.id !== id\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async editEmployee(id, updatedEmployee) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          {\n            method: 'PUT',\n            body: JSON.stringify(updatedEmployee),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        this.employees = this.employees.map((employee) =>\n          employee.id === id ? data : employee\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getEmployees() {\n      try {\n        const response = await fetch(\n          'https://jsonplaceholder.typicode.com/users'\n        );\n        const data = await response.json();\n        this.employees = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n\n<style>\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n\n.small-container {\n  max-width: 680px;\n}\n</style>\n"]}]}