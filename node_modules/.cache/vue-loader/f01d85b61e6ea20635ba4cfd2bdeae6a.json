{"remainingRequest":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue","mtime":1632437336990},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/babel-loader/lib/index.js","mtime":1623991178718},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js","mtime":1631742056592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JzsKCi8vIGltcG9ydCBtYXBib3hnbCBmcm9tICdtYXBib3gtZ2wnOyAvLyBvciAiY29uc3QgbWFwYm94Z2wgPSByZXF1aXJlKCdtYXBib3gtZ2wnKTsiCgovLyBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9Ci8vICAgJ3BrLmV5SjFJam9pZVdseGFXNW5aMmRuSWl3aVlTSTZJbU5yZEhobVkyaHBNekJxZW1FeWJuUm9iV2wxZW5CemEzb2lmUS5kRndFY0NnSFp1VzZJZHFqTHU0RG5BJzsKLy8gbmV3IG1hcGJveGdsLk1hcCh7Ci8vICAgY29udGFpbmVyOiAnbWFwJywgLy8gY29udGFpbmVyIElECi8vICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJywgLy8gc3R5bGUgVVJMCi8vICAgY2VudGVyOiBbLTc0LjUsIDQwXSwgLy8gc3RhcnRpbmcgcG9zaXRpb24gW2xuZywgbGF0XQovLyAgIHpvb206IDksIC8vIHN0YXJ0aW5nIHpvb20KLy8gfSk7Cgpkb3RlbnYuY29uZmlnKCk7CmltcG9ydCBFbXBsb3llZVRhYmxlIGZyb20gJ0AvY29tcG9uZW50cy9FbXBsb3llZVRhYmxlLnZ1ZSc7CmltcG9ydCBFbXBsb3llZUZvcm0gZnJvbSAnQC9jb21wb25lbnRzL0VtcGxveWVlRm9ybS52dWUnOwppbXBvcnQgTWFwQ29tcG9uZW50IGZyb20gJ0AvY29tcG9uZW50cy9NYXBDb21wb25lbnQudnVlJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdhcHAnLAogIGNvbXBvbmVudHM6IHsKICAgIEVtcGxveWVlVGFibGUsCiAgICBFbXBsb3llZUZvcm0sCiAgICBNYXBDb21wb25lbnQsCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2hhcGVmaWxlczogWwogICAgICAgIHsKICAgICAgICAgIGlkOiAxLAogICAgICAgICAgbmFtZTogJ1JpY2hhcmQgSGVuZHJpY2tzJywKICAgICAgICAgIGZpbGU6ICdyaWNoYXJkQHBpZWRwaXBlci5jb20nLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgaWQ6IDIsCiAgICAgICAgICBuYW1lOiAnQmVydHJhbSBHaWxmb3lsZScsCiAgICAgICAgICBmaWxlOiAnZ2lsZm95bGVAcGllZHBpcGVyLmNvbScsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBpZDogMywKICAgICAgICAgIG5hbWU6ICdEaW5lc2ggQ2h1Z3RhaScsCiAgICAgICAgICBmaWxlOiAnZGluZXNoQHBpZWRwaXBlci5jb20nLAogICAgICAgIH0sCiAgICAgIF0sCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuZ2V0RW1wbG95ZWVzKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBhZGRTaGFwZWZpbGUoZmlsZSkgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goCiAgICAgICAgICAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS91cGxvYWRzL3YxL3lpcWluZ2dnZy9jcmVkZW50aWFscz9hY2Nlc3NfdG9rZW49c2suZXlKMUlqb2llV2x4YVc1bloyZG5JaXdpWVNJNkltTnJkRzUxTVhNM09UQTJPVzR6TUhBNWREWm1kalZvWlRVaWZRLnEyZHhtd0FRams5Zmc5TEFCalU5N2cnLAogICAgICAgICAgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZmlsZSksCiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyB9LAogICAgICAgICAgfQogICAgICAgICk7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgICBjb25zb2xlLmxvZyhkYXRhLCAnaGlpaSB0aGlzIGlzIHRoZSBkYXRhJyk7CiAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgIH0KICAgIH0sCiAgICAvLyBhc3luYyBzdGFnZVNoYXBlZmlsZShmaWxlKSB7CiAgICAvLyAgIHRyeSB7CiAgICAvLyAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgKICAgIC8vICAgICAgIGBodHRwOi8vJHtjcmVkZW50aWFscy5idWNrZXR9LnMzLmFtYXpvbmF3cy5jb20vJHtjcmVkZW50aWFscy5rZXl9YCwKICAgIC8vICAgICAgIHsKICAgIC8vICAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgIC8vICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZmlsZSksCiAgICAvLyAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyB9LAogICAgLy8gICAgICAgfQogICAgLy8gICAgICk7CiAgICAvLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgIC8vICAgICBjb25zb2xlLmxvZyhkYXRhLCAnaGlpaSB0aGlzIGlzIHRoZSBkYXRhJyk7CiAgICAvLyAgICAgcmV0dXJuIGRhdGE7CiAgICAvLyAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAvLyAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAvLyAgIH0KICAgIC8vIH0sCiAgICAvLyBhc3luYyBjcmVhdGVGaWxlVXBsb2FkKGZpbGUpIHsKICAgIC8vICAgdHJ5IHsKICAgIC8vICAgICBjb25zb2xlLmxvZyhmaWxlKQogICAgLy8gICAgIGNvbnN0IE1ZX0FDQ0VTU19UT0tFTiA9ICdzay5leUoxSWpvaWVXbHhhVzVuWjJkbklpd2lZU0k2SW1OcmRHNTFNWE0zT1RBMk9XNHpNSEE1ZERabWRqVm9aVFVpZlEucTJkeG13QVFqazlmZzlMQUJqVTk3Zyc7CiAgICAvLyAgICAgY29uc3QgbWJ4VXBsb2FkcyA9IHJlcXVpcmUoJ0BtYXBib3gvbWFwYm94LXNkay9zZXJ2aWNlcy91cGxvYWRzJyk7CiAgICAvLyAgICAgY29uc3QgbWJ4Q2xpZW50ID0gcmVxdWlyZSgnQG1hcGJveC9tYXBib3gtc2RrJyk7CiAgICAvLyAgICAgY29uc3QgYmFzZUNsaWVudCA9IG1ieENsaWVudCh7IGFjY2Vzc1Rva2VuOiBNWV9BQ0NFU1NfVE9LRU4gfSk7CiAgICAvLyAgICAgY29uc3QgdXBsb2Fkc0NsaWVudCA9IG1ieFVwbG9hZHMoYmFzZUNsaWVudCk7CgogICAgLy8gICAgIGNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTsKICAgIC8vICAgICBjb25zdCBnZXRDcmVkZW50aWFscyA9ICgpID0+IHsKICAgIC8vICAgICAgICAgcmV0dXJuIHVwbG9hZHNDbGllbnQKICAgIC8vICAgICAgICAgICAuY3JlYXRlVXBsb2FkQ3JlZGVudGlhbHMoKQogICAgLy8gICAgICAgICAgIC5zZW5kKCkKICAgIC8vICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5ib2R5KTsKICAgIC8vICAgICB9CiAgICAvLyAgICAgY29uc3QgcHV0RmlsZU9uUzMgPSAoY3JlZGVudGlhbHMpID0+IHsKICAgIC8vICAgICBjb25zdCBzMyA9IG5ldyBBV1MuUzMoewogICAgLy8gICAgIGFjY2Vzc0tleUlkOiBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCwKICAgIC8vICAgICBzZWNyZXRBY2Nlc3NLZXk6IGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwKICAgIC8vICAgICBzZXNzaW9uVG9rZW46IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbiwKICAgIC8vICAgICByZWdpb246ICd1cy1lYXN0LTEnCiAgICAvLyAgIH0pOwogICAgLy8gICByZXR1cm4gczMucHV0T2JqZWN0KHsKICAgIC8vICAgICBCdWNrZXQ6IGNyZWRlbnRpYWxzLmJ1Y2tldCwKICAgIC8vICAgICBLZXk6IGNyZWRlbnRpYWxzLmtleSwKICAgIC8vICAgICBCb2R5OiB0aGlzLmZpbGUsCiAgICAvLyAgIH0pLnByb21pc2UoKTsKICAgIC8vIH07CgogICAgLy8gY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCBnZXRDcmVkZW50aWFscygpOwogICAgLy8gcHV0RmlsZU9uUzMoY3JlZGVudGlhbHMpOwogICAgLy8gLy8gY29uc3QgbXlVc2VybmFtZSA9ICd5aXFpbmdnZ2cnOwogICAgLy8gLy8gY29uc3QgbXlUaWxlc2V0ID0gJ215VGlsZXNldCc7CgogICAgLy8gdXBsb2Fkc0NsaWVudC5jcmVhdGVVcGxvYWQoewogICAgLy8gICAgIHRpbGVzZXQ6IGB5aXFpbmdnZ2cubXlUaWxlc2V0YCwKICAgIC8vICAgICB1cmw6IGNyZWRlbnRpYWxzLnVybCwKICAgIC8vICAgICBuYW1lOiBgJHt0aGlzLmZpbGUubmFtZX1gLAogICAgLy8gICB9KQogICAgLy8gICAgIC5zZW5kKCkKICAgIC8vICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAvLyAgICAgICBjb25zdCB1cGxvYWQgPSByZXNwb25zZS5ib2R5OwogICAgLy8gICAgICAgY29uc29sZS5sb2codXBsb2FkKTsKICAgIC8vICAgICB9KTsKICAgIC8vICAgY29uc29sZS5sb2coJ2RvbmUnKQogICAgLy8gICB9IGNhdGNoIChlcnJvcikgewogICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgLy8gICB9CiAgICAvLyB9LAogICAgYXN5bmMgZGVsZXRlRW1wbG95ZWUoaWQpIHsKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCBmZXRjaChgaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzLyR7aWR9YCwgewogICAgICAgICAgbWV0aG9kOiAnREVMRVRFJywKICAgICAgICB9KTsKICAgICAgICB0aGlzLmVtcGxveWVlcyA9IHRoaXMuZW1wbG95ZWVzLmZpbHRlcigKICAgICAgICAgIChlbXBsb3llZSkgPT4gZW1wbG95ZWUuaWQgIT09IGlkCiAgICAgICAgKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGVkaXRFbXBsb3llZShpZCwgdXBkYXRlZEVtcGxveWVlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgKICAgICAgICAgIGBodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdXNlcnMvJHtpZH1gLAogICAgICAgICAgewogICAgICAgICAgICBtZXRob2Q6ICdQVVQnLAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1cGRhdGVkRW1wbG95ZWUpLAogICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcgfSwKICAgICAgICAgIH0KICAgICAgICApOwogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgICAgdGhpcy5lbXBsb3llZXMgPSB0aGlzLmVtcGxveWVlcy5tYXAoKGVtcGxveWVlKSA9PgogICAgICAgICAgZW1wbG95ZWUuaWQgPT09IGlkID8gZGF0YSA6IGVtcGxveWVlCiAgICAgICAgKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGdldEVtcGxveWVlcygpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKAogICAgICAgICAgJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2VycycKICAgICAgICApOwogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgICAgdGhpcy5lbXBsb3llZXMgPSBkYXRhOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICB9CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <title>Display a map on a webpage</title>\n      <meta\n        name=\"viewport\"\n        content=\"initial-scale=1,maximum-scale=1,user-scalable=no\"\n      />\n      <link\n        href=\"https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.css\"\n        rel=\"stylesheet\"\n      />\n    </head>\n    <h1>Visualize a Shapefile from Berkeley</h1>\n    <employee-form @add:shapefile=\"createUpload\" />\n    <employee-table\n      :employees=\"employees\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n    <map />\n  </div>\n</template>\n\n<script>\nimport dotenv from 'dotenv';\n\n// import mapboxgl from 'mapbox-gl'; // or \"const mapboxgl = require('mapbox-gl');\"\n\n// mapboxgl.accessToken =\n//   'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhmY2hpMzBqemEybnRobWl1enBza3oifQ.dFwEcCgHZuW6IdqjLu4DnA';\n// new mapboxgl.Map({\n//   container: 'map', // container ID\n//   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n//   center: [-74.5, 40], // starting position [lng, lat]\n//   zoom: 9, // starting zoom\n// });\n\ndotenv.config();\nimport EmployeeTable from '@/components/EmployeeTable.vue';\nimport EmployeeForm from '@/components/EmployeeForm.vue';\nimport MapComponent from '@/components/MapComponent.vue';\nexport default {\n  name: 'app',\n  components: {\n    EmployeeTable,\n    EmployeeForm,\n    MapComponent,\n  },\n  data() {\n    return {\n      shapefiles: [\n        {\n          id: 1,\n          name: 'Richard Hendricks',\n          file: 'richard@piedpiper.com',\n        },\n        {\n          id: 2,\n          name: 'Bertram Gilfoyle',\n          file: 'gilfoyle@piedpiper.com',\n        },\n        {\n          id: 3,\n          name: 'Dinesh Chugtai',\n          file: 'dinesh@piedpiper.com',\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.getEmployees();\n  },\n  methods: {\n    async addShapefile(file) {\n      try {\n        const response = await fetch(\n          'https://api.mapbox.com/uploads/v1/yiqingggg/credentials?access_token=sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g',\n          {\n            method: 'POST',\n            body: JSON.stringify(file),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        console.log(data, 'hiii this is the data');\n        return data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // async stageShapefile(file) {\n    //   try {\n    //     const response = await fetch(\n    //       `http://${credentials.bucket}.s3.amazonaws.com/${credentials.key}`,\n    //       {\n    //         method: 'PUT',\n    //         body: JSON.stringify(file),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     console.log(data, 'hiii this is the data');\n    //     return data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async createFileUpload(file) {\n    //   try {\n    //     console.log(file)\n    //     const MY_ACCESS_TOKEN = 'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g';\n    //     const mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\n    //     const mbxClient = require('@mapbox/mapbox-sdk');\n    //     const baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\n    //     const uploadsClient = mbxUploads(baseClient);\n\n    //     const AWS = require('aws-sdk');\n    //     const getCredentials = () => {\n    //         return uploadsClient\n    //           .createUploadCredentials()\n    //           .send()\n    //           .then(response => response.body);\n    //     }\n    //     const putFileOnS3 = (credentials) => {\n    //     const s3 = new AWS.S3({\n    //     accessKeyId: credentials.accessKeyId,\n    //     secretAccessKey: credentials.secretAccessKey,\n    //     sessionToken: credentials.sessionToken,\n    //     region: 'us-east-1'\n    //   });\n    //   return s3.putObject({\n    //     Bucket: credentials.bucket,\n    //     Key: credentials.key,\n    //     Body: this.file,\n    //   }).promise();\n    // };\n\n    // const credentials = await getCredentials();\n    // putFileOnS3(credentials);\n    // // const myUsername = 'yiqingggg';\n    // // const myTileset = 'myTileset';\n\n    // uploadsClient.createUpload({\n    //     tileset: `yiqingggg.myTileset`,\n    //     url: credentials.url,\n    //     name: `${this.file.name}`,\n    //   })\n    //     .send()\n    //     .then(response => {\n    //       const upload = response.body;\n    //       console.log(upload);\n    //     });\n    //   console.log('done')\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    async deleteEmployee(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: 'DELETE',\n        });\n        this.employees = this.employees.filter(\n          (employee) => employee.id !== id\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async editEmployee(id, updatedEmployee) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          {\n            method: 'PUT',\n            body: JSON.stringify(updatedEmployee),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        this.employees = this.employees.map((employee) =>\n          employee.id === id ? data : employee\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getEmployees() {\n      try {\n        const response = await fetch(\n          'https://jsonplaceholder.typicode.com/users'\n        );\n        const data = await response.json();\n        this.employees = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n\n<style>\nbody {\n  margin: 0;\n  padding: 0;\n}\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n\n.small-container {\n  max-width: 680px;\n}\n</style>\n"]}]}