{"remainingRequest":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/App.vue","mtime":1632794633883},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js","mtime":1632429635042},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js","mtime":1632429636569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JzsKCi8vIGltcG9ydCBtYXBib3hnbCBmcm9tICdtYXBib3gtZ2wnOyAvLyBvciAiY29uc3QgbWFwYm94Z2wgPSByZXF1aXJlKCdtYXBib3gtZ2wnKTsiCgovLyBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9Ci8vICAgJ3BrLmV5SjFJam9pZVdseGFXNW5aMmRuSWl3aVlTSTZJbU5yZEhobVkyaHBNekJxZW1FeWJuUm9iV2wxZW5CemEzb2lmUS5kRndFY0NnSFp1VzZJZHFqTHU0RG5BJzsKLy8gbmV3IG1hcGJveGdsLk1hcCh7Ci8vICAgY29udGFpbmVyOiAnbWFwJywgLy8gY29udGFpbmVyIElECi8vICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJywgLy8gc3R5bGUgVVJMCi8vICAgY2VudGVyOiBbLTc0LjUsIDQwXSwgLy8gc3RhcnRpbmcgcG9zaXRpb24gW2xuZywgbGF0XQovLyAgIHpvb206IDksIC8vIHN0YXJ0aW5nIHpvb20KLy8gfSk7Cgpkb3RlbnYuY29uZmlnKCk7CmltcG9ydCBFbXBsb3llZVRhYmxlIGZyb20gJ0AvY29tcG9uZW50cy9FbXBsb3llZVRhYmxlLnZ1ZSc7CmltcG9ydCBFbXBsb3llZUZvcm0gZnJvbSAnQC9jb21wb25lbnRzL0VtcGxveWVlRm9ybS52dWUnOwppbXBvcnQgTWFwQ29tcG9uZW50IGZyb20gJ0AvY29tcG9uZW50cy9NYXBDb21wb25lbnQudnVlJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdhcHAnLAogIGNvbXBvbmVudHM6IHsKICAgIEVtcGxveWVlVGFibGUsCiAgICBFbXBsb3llZUZvcm0sCiAgICBNYXBDb21wb25lbnQsCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2hhcGVmaWxlOiBbXSwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBhZGRTaGFwZWZpbGUobmV3U2hhcGVmaWxlKSB7CiAgICAgIC8vYWRkIHNoYXBlZmlsZSB0byBhcnJheSBvZiBzaGFwZWZpbGUKICAgICAgY29uc3QgaWQgPSB0aGlzLnNoYXBlZmlsZS5sZW5ndGg7CiAgICAgIG5ld1NoYXBlZmlsZS5pZCA9IGlkOwogICAgICB0aGlzLnNoYXBlZmlsZSA9IFsuLi50aGlzLnNoYXBlZmlsZSwgbmV3U2hhcGVmaWxlXTsKICAgICAgY29uc29sZS5sb2cobmV3U2hhcGVmaWxlLCB0aGlzLnNoYXBlZmlsZSk7CiAgICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyB1cGxvYWQuLi4nKTsKICAgICAgY29uc3QgZ2V0Q3JlZGVudGlhbHMgPSAoKSA9PiB7CiAgICAgICAgcmV0dXJuIHVwbG9hZHNDbGllbnQKICAgICAgICAgIC5jcmVhdGVVcGxvYWRDcmVkZW50aWFscygpCiAgICAgICAgICAuc2VuZCgpCiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmJvZHkpOwogICAgICB9OwogICAgICBjb25zdCBwdXRGaWxlT25TMyA9IChjcmVkZW50aWFscykgPT4gewogICAgICAgIGNvbnN0IHMzID0gbmV3IEFXUy5TMyh7CiAgICAgICAgICBhY2Nlc3NLZXlJZDogY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQsCiAgICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwKICAgICAgICAgIHNlc3Npb25Ub2tlbjogY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuLAogICAgICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJywKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gczMKICAgICAgICAgIC5wdXRPYmplY3QoewogICAgICAgICAgICBCdWNrZXQ6IGNyZWRlbnRpYWxzLmJ1Y2tldCwKICAgICAgICAgICAgS2V5OiBjcmVkZW50aWFscy5rZXksCiAgICAgICAgICAgIEJvZHk6IHRoaXMuc2VsZWN0ZWRGaWxlLAogICAgICAgICAgfSkKICAgICAgICAgIC5wcm9taXNlKCk7CiAgICAgIH07CiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgZ2V0Q3JlZGVudGlhbHMoKTsKICAgICAgcHV0RmlsZU9uUzMoY3JlZGVudGlhbHMpOwogICAgICBjb25zdCBteVVzZXJuYW1lID0gJ3lpcWluZ2dnZyc7CiAgICAgIGNvbnN0IG15VGlsZXNldCA9IGBteVRpbGVzZXQwYDsKICAgICAgY29uc29sZS5sb2coY3JlZGVudGlhbHMpOwogICAgICB1cGxvYWRzQ2xpZW50CiAgICAgICAgLmNyZWF0ZVVwbG9hZCh7CiAgICAgICAgICB0aWxlc2V0OiBgJHtteVVzZXJuYW1lfS4ke215VGlsZXNldH1gLAogICAgICAgICAgdXJsOgogICAgICAgICAgICAnaHR0cHM6Ly90aWxlc3RyZWFtLXRpbGVzZXRzLXByb2R1Y3Rpb24uczMuYW1hem9uYXdzLmNvbS9mOS9fcGVuZGluZy9vamR4Yjd0eWtwODJ4MXMzbmNlcXl4dGtjL3lpcWluZ2dnZycsCiAgICAgICAgICBuYW1lOiBgVVBMT0FEMGAsCiAgICAgICAgfSkKICAgICAgICAuc2VuZCgpCiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICBjb25zdCB1cGxvYWQgPSByZXNwb25zZS5ib2R5OwogICAgICAgICAgY29uc29sZS5sb2codXBsb2FkLCB1cGxvYWQudGlsZXNldCk7CiAgICAgICAgICB0aWxlc2V0aWQgPSB1cGxvYWQudGlsZXNldDsKICAgICAgICAgIHRoaXMuc2hhcGVmaWxlW2lkXS51cGxvYWRJZCA9IHVwbG9hZC5pZDsKICAgICAgICB9KTsKICAgICAgY29uc29sZS5sb2coJ2RvbmUnLCB0aGlzLnNoYXBlZmlsZSk7CgogICAgICAvLyBhd2FpdCBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgLy8gICB0aGlzLmNyZWF0ZU1hcHMobmV3U2hhcGVmaWxlLmlkKTsKICAgICAgLy8gfSwgMTAwMDApOwogICAgICAvLyBjb25zdCBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsKICAgICAgLy8gICBjb250YWluZXI6ICdtYXAtY29tcG9uZW50JywgLy8gY29udGFpbmVyIElECiAgICAgIC8vICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJywgLy8gc3R5bGUgVVJMCiAgICAgIC8vICAgY2VudGVyOiBbLTEyMi4yNzI3ODEsIDM3Ljg3MTY2Nl0sIC8vIHN0YXJ0aW5nIHBvc2l0aW9uIFtsbmcsIGxhdF0KICAgICAgLy8gICB6b29tOiAxNSwgLy8gc3RhcnRpbmcgem9vbQogICAgICAvLyB9KTsKICAgICAgY29uc29sZS5sb2codGlsZXNldGlkKTsKICAgICAgLy8gbWFwLm9uKCdsb2FkJywgKCkgPT4gewogICAgICAvLyAgIG1hcC5hZGRTb3VyY2UoJ3BhcmtzJywgewogICAgICAvLyAgICAgdHlwZTogJ3ZlY3RvcicsCiAgICAgIC8vICAgICB1cmw6IGBtYXBib3g6Ly95aXFpbmdnZ2cubXlUaWxlc2V0NWAsCiAgICAgIC8vICAgfSk7CiAgICAgIC8vICAgbWFwLmFkZExheWVyKHsKICAgICAgLy8gICAgIGlkOiAncGFya3MnLAogICAgICAvLyAgICAgdHlwZTogJ2xpbmUnLAogICAgICAvLyAgICAgc291cmNlOiAncGFya3MnLAogICAgICAvLyAgICAgJ3NvdXJjZS1sYXllcic6ICdVUExPQUQ1JywKICAgICAgLy8gICAgIGxheW91dDogewogICAgICAvLyAgICAgICAvLyBNYWtlIHRoZSBsYXllciB2aXNpYmxlIGJ5IGRlZmF1bHQuCiAgICAgIC8vICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJywKICAgICAgLy8gICAgICAgJ2xpbmUtam9pbic6ICdyb3VuZCcsCiAgICAgIC8vICAgICAgICdsaW5lLWNhcCc6ICdyb3VuZCcsCiAgICAgIC8vICAgICB9LAogICAgICAvLyAgICAgcGFpbnQ6IHsKICAgICAgLy8gICAgICAgJ2xpbmUtY29sb3InOiAnIzg3N2I1OScsCiAgICAgIC8vICAgICAgICdsaW5lLXdpZHRoJzogMjAsCiAgICAgIC8vICAgICB9LAogICAgICAvLyAgIH0pOwogICAgICAvLyB9KTsKICAgICAgLy8gY29uc3QgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7CiAgICAgIC8vICAgY29udGFpbmVyOiAnbWFwLWNvbXBvbmVudCcsIC8vIGNvbnRhaW5lciBJRAogICAgICAvLyAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsIC8vIHN0eWxlIFVSTAogICAgICAvLyAgIGNlbnRlcjogWy0xMjIuMjcyNzgxLCAzNy44NzE2NjZdLCAvLyBzdGFydGluZyBwb3NpdGlvbiBbbG5nLCBsYXRdCiAgICAgIC8vICAgem9vbTogMTUsIC8vIHN0YXJ0aW5nIHpvb20KICAgICAgLy8gfSk7CiAgICAgIGNvbnNvbGUubG9nKHRpbGVzZXRpZCk7CiAgICB9LAogICAgLy8gYXN5bmMgYWRkRW1wbG95ZWUoZW1wbG95ZWUpIHsKICAgIC8vICAgdHJ5IHsKICAgIC8vICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKAogICAgLy8gICAgICAgJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2VycycsCiAgICAvLyAgICAgICB7CiAgICAvLyAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgLy8gICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShlbXBsb3llZSksCiAgICAvLyAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyB9LAogICAgLy8gICAgICAgfQogICAgLy8gICAgICk7CiAgICAvLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgIC8vICAgICB0aGlzLmVtcGxveWVlcyA9IFsuLi50aGlzLmVtcGxveWVlcywgZGF0YV07CiAgICAvLyAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAvLyAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAvLyAgIH0KICAgIC8vIH0sCiAgICAvLyBhc3luYyBnZXRFbXBsb3llZXMoKSB7CiAgICAvLyAgIC8vIGNvbnN0IGxhc3RJZCA9CiAgICAvLyAgIC8vICAgdGhpcy5lbXBsb3llZXMubGVuZ3RoID4gMAogICAgLy8gICAvLyAgICAgPyB0aGlzLmVtcGxveWVlc1t0aGlzLmVtcGxveWVlcy5sZW5ndGggLSAxXS5pZAogICAgLy8gICAvLyAgICAgOiAwOwogICAgLy8gICAvLyBjb25zdCBpZCA9IGxhc3RJZCArIDE7CiAgICAvLyAgIC8vIGNvbnN0IG5ld0VtcGxveWVlID0geyAuLi5lbXBsb3llZSwgaWQgfTsKICAgIC8vICAgLy8gdGhpcy5lbXBsb3llZXMgPSBbLi4udGhpcy5lbXBsb3llZXMsIG5ld0VtcGxveWVlXTsKICAgIC8vICAgdHJ5IHsKICAgIC8vICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKAogICAgLy8gICAgICAgJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS91c2VycycKICAgIC8vICAgICApOwogICAgLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAvLyAgICAgdGhpcy5lbXBsb3llZXMgPSBkYXRhOwogICAgLy8gICB9IGNhdGNoIChlcnJvcikgewogICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgLy8gICB9CiAgICAvLyB9LAogICAgLy8gZGVsZXRlRW1wbG95ZWUoaWQpIHsKICAgIC8vICAgdGhpcy5lbXBsb3llZXMgPSB0aGlzLmVtcGxveWVlcy5maWx0ZXIoCiAgICAvLyAgICAgZW1wbG95ZWUgPT4gZW1wbG95ZWUuaWQgIT09IGlkCiAgICAvLyAgICkKICAgIC8vIH0sCiAgICAvLyBhc3luYyBkZWxldGVFbXBsb3llZShpZCkgewogICAgLy8gICB0cnkgewogICAgLy8gICAgIGF3YWl0IGZldGNoKGBodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdXNlcnMvJHtpZH1gLCB7CiAgICAvLyAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgLy8gICAgIH0pOwogICAgLy8gICAgIHRoaXMuZW1wbG95ZWVzID0gdGhpcy5lbXBsb3llZXMuZmlsdGVyKAogICAgLy8gICAgICAgKGVtcGxveWVlKSA9PiBlbXBsb3llZS5pZCAhPT0gaWQKICAgIC8vICAgICApOwogICAgLy8gICB9IGNhdGNoIChlcnJvcikgewogICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgLy8gICB9CiAgICAvLyB9LAogIH0sCn07Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <h1>Visualize a Shapefile from Berkeley</h1>\n    <employee-form @add:shapefile=\"createUpload\" />\n    <employee-table\n      :employees=\"employees\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n    <map-component />\n  </div>\n</template>\n\n<script>\nimport dotenv from 'dotenv';\n\n// import mapboxgl from 'mapbox-gl'; // or \"const mapboxgl = require('mapbox-gl');\"\n\n// mapboxgl.accessToken =\n//   'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhmY2hpMzBqemEybnRobWl1enBza3oifQ.dFwEcCgHZuW6IdqjLu4DnA';\n// new mapboxgl.Map({\n//   container: 'map', // container ID\n//   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n//   center: [-74.5, 40], // starting position [lng, lat]\n//   zoom: 9, // starting zoom\n// });\n\ndotenv.config();\nimport EmployeeTable from '@/components/EmployeeTable.vue';\nimport EmployeeForm from '@/components/EmployeeForm.vue';\nimport MapComponent from '@/components/MapComponent.vue';\nexport default {\n  name: 'app',\n  components: {\n    EmployeeTable,\n    EmployeeForm,\n    MapComponent,\n  },\n  data() {\n    return {\n      shapefile: [],\n    };\n  },\n  methods: {\n    async addShapefile(newShapefile) {\n      //add shapefile to array of shapefile\n      const id = this.shapefile.length;\n      newShapefile.id = id;\n      this.shapefile = [...this.shapefile, newShapefile];\n      console.log(newShapefile, this.shapefile);\n      console.log('starting upload...');\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.selectedFile,\n          })\n          .promise();\n      };\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      const myUsername = 'yiqingggg';\n      const myTileset = `myTileset0`;\n      console.log(credentials);\n      uploadsClient\n        .createUpload({\n          tileset: `${myUsername}.${myTileset}`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/f9/_pending/ojdxb7tykp82x1s3nceqyxtkc/yiqingggg',\n          name: `UPLOAD0`,\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload, upload.tileset);\n          tilesetid = upload.tileset;\n          this.shapefile[id].uploadId = upload.id;\n        });\n      console.log('done', this.shapefile);\n\n      // await setTimeout(() => {\n      //   this.createMaps(newShapefile.id);\n      // }, 10000);\n      // const map = new mapboxgl.Map({\n      //   container: 'map-component', // container ID\n      //   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      //   center: [-122.272781, 37.871666], // starting position [lng, lat]\n      //   zoom: 15, // starting zoom\n      // });\n      console.log(tilesetid);\n      // map.on('load', () => {\n      //   map.addSource('parks', {\n      //     type: 'vector',\n      //     url: `mapbox://yiqingggg.myTileset5`,\n      //   });\n      //   map.addLayer({\n      //     id: 'parks',\n      //     type: 'line',\n      //     source: 'parks',\n      //     'source-layer': 'UPLOAD5',\n      //     layout: {\n      //       // Make the layer visible by default.\n      //       visibility: 'visible',\n      //       'line-join': 'round',\n      //       'line-cap': 'round',\n      //     },\n      //     paint: {\n      //       'line-color': '#877b59',\n      //       'line-width': 20,\n      //     },\n      //   });\n      // });\n      // const map = new mapboxgl.Map({\n      //   container: 'map-component', // container ID\n      //   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      //   center: [-122.272781, 37.871666], // starting position [lng, lat]\n      //   zoom: 15, // starting zoom\n      // });\n      console.log(tilesetid);\n    },\n    // async addEmployee(employee) {\n    //   try {\n    //     const response = await fetch(\n    //       'https://jsonplaceholder.typicode.com/users',\n    //       {\n    //         method: 'POST',\n    //         body: JSON.stringify(employee),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.employees = [...this.employees, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async getEmployees() {\n    //   // const lastId =\n    //   //   this.employees.length > 0\n    //   //     ? this.employees[this.employees.length - 1].id\n    //   //     : 0;\n    //   // const id = lastId + 1;\n    //   // const newEmployee = { ...employee, id };\n    //   // this.employees = [...this.employees, newEmployee];\n    //   try {\n    //     const response = await fetch(\n    //       'https://jsonplaceholder.typicode.com/users'\n    //     );\n    //     const data = await response.json();\n    //     this.employees = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // deleteEmployee(id) {\n    //   this.employees = this.employees.filter(\n    //     employee => employee.id !== id\n    //   )\n    // },\n    // async deleteEmployee(id) {\n    //   try {\n    //     await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n    //       method: 'DELETE',\n    //     });\n    //     this.employees = this.employees.filter(\n    //       (employee) => employee.id !== id\n    //     );\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n  },\n};\n</script>\n\n<style>\nbody {\n  margin: 0;\n  padding: 0;\n}\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n.small-container {\n  max-width: 680px;\n}\n</style>\n"]}]}