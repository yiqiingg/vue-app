{"remainingRequest":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/components/EmployeeForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/components/EmployeeForm.vue","mtime":1632466098878},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js","mtime":1632429635042},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js","mtime":1632429636569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["EmployeeForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"employee-form\">\n    <label>Shapefile upload</label>\n    <!-- <form @submit.prevent=\"checkUploadStatus\">\n      <button>Check</button>\n    </form> -->\n    <form\n      class=\"upload\"\n      @submit.prevent=\"handleFileSubmit\"\n      @change=\"previewFiles\"\n    >\n      <input type=\"file\" name=\"uploadFile\" accept=\".zip\" required />\n      <br /><br />\n      <input type=\"submit\" />\n    </form>\n\n    <button class=\"btn btn-info\" @click=\"onPickFile\">\n      Upload profile picture\n    </button>\n    <input\n      type=\"file\"\n      style=\"display: none\"\n      ref=\"fileInput\"\n      @change=\"onFilePicked\"\n    />\n\n    <form @submit.prevent=\"handleSubmit\">\n      <!-- <input type=\"text\" /> -->\n      <label>Employee name</label>\n      <input\n        ref=\"first\"\n        type=\"text\"\n        :class=\"{ 'has-error': submitting && invalidName }\"\n        v-model=\"employee.name\"\n        @focus=\"clearStatus\"\n        @keypress=\"clearStatus\"\n      />\n      <label>Employee Email</label>\n      <!-- <input type=\"text\" /> -->\n      <!-- <input v-model=\"employee.email\" type=\"text\" /> -->\n      <input\n        type=\"text\"\n        :class=\"{ 'has-error': submitting && invalidEmail }\"\n        v-model=\"employee.email\"\n        @focus=\"clearStatus\"\n        @keypress=\"clearStatus\"\n      />\n      <p v-if=\"error && submitting\" class=\"error-message\">\n        Please fill out all required fields.\n      </p>\n      <p v-if=\"success\" class=\"success-message\">\n        Employee successfully added!\n      </p>\n      <button>Add Employee</button>\n    </form>\n    <div id=\"map-component\" />\n  </div>\n</template>\n\n<script>\nlet tilesetid;\nconst MY_ACCESS_TOKEN =\n  'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhma3ZiYzBrMXQybnRoemFkOTlhMW4ifQ.Fe0XhvYKsc5A9MmE8xD7OQ';\nconst mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\nconst mbxClient = require('@mapbox/mapbox-sdk');\nconst baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\nconst uploadsClient = mbxUploads(baseClient);\n// let uploadId;\nimport mapboxgl from 'mapbox-gl';\nconst AWS = require('aws-sdk');\nmapboxgl.accessToken =\n  'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHkwM2w1cTJ5dWgydnBtdWx4MXFlN3EifQ.WoSz2Zn-h7SkdDmouxC0XQ';\nexport default {\n  name: 'employee-form',\n  data() {\n    return {\n      submiting: false,\n      error: false,\n      success: false,\n      employee: {\n        name: '',\n        email: '',\n      },\n      selectedFile: null,\n    };\n  },\n  methods: {\n    async onPickFile() {\n      this.$refs.fileInput.click();\n    },\n    // async checkUploadStatus() {\n    //   await uploadsClient\n    //     .getUpload({\n    //       uploadId: uploadId,\n    //     })\n    //     .send()\n    //     .then((response) => {\n    //       const status = response.body;\n    //       console.log(status);\n    //     });\n    // },\n    async handleFileSubmit() {\n      console.log('starting upload...');\n      // console.log(event.target.files);\n      // import * as fs from 'fs';\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.selectedFile,\n            // Body: fs.createReadStream('/path/to/file.mbtiles')\n          })\n          .promise();\n      };\n      // console.log(await getCredentials());\n      // let credentials = await getCredentials();\n      // console.log(credentials);\n      // credentials = putFileOnS3(credentials);\n      // response.then(console.log);\n      // response.then((res) => console.log(res));\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      const myUsername = 'yiqingggg';\n      const myTileset = 'myTileset2';\n      // const credentials = uploadsClient.createUploadCredentials();\n      console.log(credentials);\n      uploadsClient\n        .createUpload({\n          tileset: `${myUsername}.${myTileset}`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/f9/_pending/ojdxb7tykp82x1s3nceqyxtkc/yiqingggg',\n          name: 'JMLQ UPLOAD1',\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload, upload.tileset);\n          tilesetid = upload.tileset;\n          // uploadId = response.body.id;\n        });\n      // await uploadsClient\n      //   .getUpload({\n      //     uploadId: uploadId,\n      //   })\n      //   .send()\n      //   .then((response) => {\n      //     const status = response.body;\n      //     console.log(status);\n      //   });\n      console.log('done');\n      const map = new mapboxgl.Map({\n        container: 'map-component', // container ID\n        style: 'mapbox://styles/mapbox/streets-v11', // style URL\n        center: [-122.272781, 37.871666], // starting position [lng, lat]\n        zoom: 15, // starting zoom\n      });\n      console.log(tilesetid);\n      map.on('load', () => {\n        map.addSource('parks', {\n          type: 'vector',\n          url: `mapbox://yiqingggg.myTileset2`,\n        });\n        map.addLayer({\n          id: 'parks',\n          type: 'line',\n          source: 'parks',\n          'source-layer': 'JMLQ UPLOAD1',\n          layout: {\n            // Make the layer visible by default.\n            visibility: 'visible',\n            'line-join': 'round',\n            'line-cap': 'round',\n          },\n          paint: {\n            'line-color': '#877b59',\n            'line-width': 20,\n          },\n        });\n      });\n    },\n    // async onFilePicked (event) {\n    //   const files = event.target.files\n    //   let filename = files[0].name\n    //   const fileReader = new FileReader()\n    //   fileReader.addEventListener('load', () => {\n    //     this.imageUrl = fileReader.result\n    //   })\n    //   fileReader.readAsDataURL(files[0])\n    //   this.image = files[0]\n    //   console.log(filename);\n    //   await handleFileSubmit(this.image);\n    // },\n    async previewFiles(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    handleSubmit() {\n      console.log('testing handleSubmit');\n      this.submitting = true;\n      this.clearStatus();\n      if (this.invalidName || this.invalidEmail) {\n        this.error = true;\n        return;\n      }\n      this.$emit('add:employee', this.employee);\n      this.$refs.first.focus();\n      this.employee = {\n        name: '',\n        email: '',\n      };\n      this.error = false;\n      this.success = true;\n      this.submitting = false;\n    },\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n  },\n  computed: {\n    invalidName() {\n      return this.employee.name === '';\n    },\n    invalidEmail() {\n      return this.employee.email === '';\n    },\n  },\n};\n//   export default {\n//     name: 'employee-form',\n//     data() {\n//       return {\n//         employee: {\n//           name: '',\n//           email: '',\n//         },\n//       }\n//     },\n//     methods: {\n//         handleSubmit() {\n//             console.log('testing handleSubmit')\n//         },\n//     },\n//   }\n</script>\n\n<style scoped>\nform {\n  margin-bottom: 2rem;\n}\n[class*='-message'] {\n  font-weight: 500;\n}\n.error-message {\n  color: #d33c40;\n}\n.success-message {\n  color: #32a95d;\n}\n</style>\n"],"sourceRoot":"src/components"}]}