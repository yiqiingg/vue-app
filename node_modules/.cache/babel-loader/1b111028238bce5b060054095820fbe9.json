{"remainingRequest":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/App.vue","mtime":1632782812476},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js","mtime":1632429635042},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js","mtime":1632429636569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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AAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA,gBAAA,aAAA,CACA,YADA,CACA;AACA,kBAAA,OAAA,YAAA,UAAA,cAAA,SAAA,CADA;AAEA,kBAAA,GAAA,EACA,yGAHA;AAIA,kBAAA,IAAA;AAJA,iBADA,EAOA,IAPA,GAQA,IARA,CAQA,UAAA,QAAA,EAAA;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,IAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,MAAA,CAAA,OAAA;AACA,kBAAA,SAAA,GAAA,MAAA,CAAA,OAAA;AACA,kBAAA,KAAA,CAAA,SAAA,CAAA,EAAA,EAAA,QAAA,GAAA,MAAA,CAAA,EAAA;AACA,iBAbA;AAcA,gBAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,KAAA,CAAA,SAAA,EA/CA,CAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EA1DA,CA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,SAAA;;AAvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwFA,KAxHA,CAyHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhMA;AAXA,CAAA","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <h1>Visualize a Shapefile from Berkeley</h1>\n\n    <shapefile-form @add:shapefile=\"addShapefile\" />\n    <div id=\"map-component\" />\n    <shapefile-table :shapefile=\"shapefile\" />\n  </div>\n</template>\n\n<script>\nlet tilesetid;\nconst MY_ACCESS_TOKEN =\n  'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhma3ZiYzBrMXQybnRoemFkOTlhMW4ifQ.Fe0XhvYKsc5A9MmE8xD7OQ';\nconst mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\nconst mbxClient = require('@mapbox/mapbox-sdk');\nconst baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\nconst uploadsClient = mbxUploads(baseClient);\n// let uploadId;\nimport mapboxgl from 'mapbox-gl';\nconst AWS = require('aws-sdk');\nmapboxgl.accessToken =\n  'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHkwM2w1cTJ5dWgydnBtdWx4MXFlN3EifQ.WoSz2Zn-h7SkdDmouxC0XQ';\nimport ShapefileTable from '@/components/ShapefileTable.vue';\nimport ShapefileForm from '@/components/ShapefileForm.vue';\nexport default {\n  name: 'app',\n  components: {\n    ShapefileForm,\n    ShapefileTable,\n  },\n  data() {\n    return {\n      shapefile: [],\n    };\n  },\n  methods: {\n    async createMaps(newShapefileId) {\n      console.log(newShapefileId);\n      const map = new mapboxgl.Map({\n        container: 'map-component', // container ID\n        style: 'mapbox://styles/mapbox/streets-v11', // style URL\n        center: [-122.272781, 37.871666], // starting position [lng, lat]\n        zoom: 15, // starting zoom\n      });\n      map.on('load', () => {\n        map.addSource('parks', {\n          type: 'vector',\n          url: `mapbox://yiqingggg.myTileset2`,\n        });\n        map.addLayer({\n          id: 'parks',\n          type: 'line',\n          source: 'parks',\n          'source-layer': `JMLQ UPLOAD1`,\n          layout: {\n            // Make the layer visible by default.\n            visibility: 'visible',\n            'line-join': 'round',\n            'line-cap': 'round',\n          },\n          paint: {\n            'line-color': '#877b59',\n            'line-width': 20,\n          },\n        });\n      });\n    },\n    async addShapefile(newShapefile) {\n      //add shapefile to array of shapefile\n      const id = this.shapefile.length;\n      newShapefile.id = id;\n      this.shapefile = [...this.shapefile, newShapefile];\n      console.log(newShapefile, this.shapefile);\n      console.log('starting upload...');\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.selectedFile,\n          })\n          .promise();\n      };\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      const myUsername = 'yiqingggg';\n      const myTileset = `myTileset0`;\n      console.log(credentials);\n      uploadsClient\n        .createUpload({\n          tileset: `${myUsername}.${myTileset}`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/f9/_pending/ojdxb7tykp82x1s3nceqyxtkc/yiqingggg',\n          name: `UPLOAD0`,\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload, upload.tileset);\n          tilesetid = upload.tileset;\n          this.shapefile[id].uploadId = upload.id;\n        });\n      console.log('done', this.shapefile);\n\n      // await setTimeout(() => {\n      //   this.createMaps(newShapefile.id);\n      // }, 10000);\n      // const map = new mapboxgl.Map({\n      //   container: 'map-component', // container ID\n      //   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      //   center: [-122.272781, 37.871666], // starting position [lng, lat]\n      //   zoom: 15, // starting zoom\n      // });\n      console.log(tilesetid);\n      // map.on('load', () => {\n      //   map.addSource('parks', {\n      //     type: 'vector',\n      //     url: `mapbox://yiqingggg.myTileset5`,\n      //   });\n      //   map.addLayer({\n      //     id: 'parks',\n      //     type: 'line',\n      //     source: 'parks',\n      //     'source-layer': 'UPLOAD5',\n      //     layout: {\n      //       // Make the layer visible by default.\n      //       visibility: 'visible',\n      //       'line-join': 'round',\n      //       'line-cap': 'round',\n      //     },\n      //     paint: {\n      //       'line-color': '#877b59',\n      //       'line-width': 20,\n      //     },\n      //   });\n      // });\n      // const map = new mapboxgl.Map({\n      //   container: 'map-component', // container ID\n      //   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      //   center: [-122.272781, 37.871666], // starting position [lng, lat]\n      //   zoom: 15, // starting zoom\n      // });\n      console.log(tilesetid);\n    },\n    // async addEmployee(employee) {\n    //   try {\n    //     const response = await fetch(\n    //       'https://jsonplaceholder.typicode.com/users',\n    //       {\n    //         method: 'POST',\n    //         body: JSON.stringify(employee),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.employees = [...this.employees, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async getEmployees() {\n    //   // const lastId =\n    //   //   this.employees.length > 0\n    //   //     ? this.employees[this.employees.length - 1].id\n    //   //     : 0;\n    //   // const id = lastId + 1;\n    //   // const newEmployee = { ...employee, id };\n    //   // this.employees = [...this.employees, newEmployee];\n    //   try {\n    //     const response = await fetch(\n    //       'https://jsonplaceholder.typicode.com/users'\n    //     );\n    //     const data = await response.json();\n    //     this.employees = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // deleteEmployee(id) {\n    //   this.employees = this.employees.filter(\n    //     employee => employee.id !== id\n    //   )\n    // },\n    // async deleteEmployee(id) {\n    //   try {\n    //     await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n    //       method: 'DELETE',\n    //     });\n    //     this.employees = this.employees.filter(\n    //       (employee) => employee.id !== id\n    //     );\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async editEmployee(id, updatedEmployee) {\n    //   // this.employees = this.employees.map(employee =>\n    //   //   employee.id === id? updatedEmployee : employee\n    //   // )\n    //   try {\n    //     const response = await fetch(\n    //       `https://jsonplaceholder.typicode.com/users/${id}`,\n    //       {\n    //         method: 'PUT',\n    //         body: JSON.stringify(updatedEmployee),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.employees = this.employees.map((employee) =>\n    //       employee.id === id ? data : employee\n    //     );\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n  },\n};\n</script>\n\n<style>\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n.small-container {\n  max-width: 680px;\n}\n</style>\n"],"sourceRoot":"src"}]}