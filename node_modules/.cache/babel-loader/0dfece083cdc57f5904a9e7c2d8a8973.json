{"remainingRequest":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/babel-loader/lib/index.js!/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/vue-app/src/App.vue","mtime":1632378239742},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/babel-loader/lib/index.js","mtime":1623991178718},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1631742054846},{"path":"/Users/yiqing/Downloads/vue-test/vue-app/node_modules/vue-loader/lib/index.js","mtime":1631742056592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <h1>Visualize a Shapefile from Berkeley</h1>\n    <employee-form @add:shapefile=\"createUpload\" />\n    <employee-table\n      :employees=\"employees\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n  </div>\n</template>\n\n<script>\nimport dotenv from 'dotenv';\n\ndotenv.config();\nimport EmployeeTable from '@/components/EmployeeTable.vue';\nimport EmployeeForm from '@/components/EmployeeForm.vue';\nexport default {\n  name: 'app',\n  components: {\n    EmployeeTable,\n    EmployeeForm,\n  },\n  data() {\n    return {\n      shapefiles: [\n        {\n          id: 1,\n          name: 'Richard Hendricks',\n          file: 'richard@piedpiper.com',\n        },\n        {\n          id: 2,\n          name: 'Bertram Gilfoyle',\n          file: 'gilfoyle@piedpiper.com',\n        },\n        {\n          id: 3,\n          name: 'Dinesh Chugtai',\n          file: 'dinesh@piedpiper.com',\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.getEmployees();\n  },\n  methods: {\n    async addShapefile(file) {\n      try {\n        const response = await fetch(\n          'https://api.mapbox.com/uploads/v1/yiqingggg/credentials?access_token=sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g',\n          {\n            method: 'POST',\n            body: JSON.stringify(file),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        console.log(data, 'hiii this is the data');\n        return data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // async stageShapefile(file) {\n    //   try {\n    //     const response = await fetch(\n    //       `http://${credentials.bucket}.s3.amazonaws.com/${credentials.key}`,\n    //       {\n    //         method: 'PUT',\n    //         body: JSON.stringify(file),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     console.log(data, 'hiii this is the data');\n    //     return data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async createFileUpload(file) {\n    //   try {\n    //     console.log(file)\n    //     const MY_ACCESS_TOKEN = 'sk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdG51MXM3OTA2OW4zMHA5dDZmdjVoZTUifQ.q2dxmwAQjk9fg9LABjU97g';\n    //     const mbxUploads = require('@mapbox/mapbox-sdk/services/uploads');\n    //     const mbxClient = require('@mapbox/mapbox-sdk');\n    //     const baseClient = mbxClient({ accessToken: MY_ACCESS_TOKEN });\n    //     const uploadsClient = mbxUploads(baseClient);\n\n    //     const AWS = require('aws-sdk');\n    //     const getCredentials = () => {\n    //         return uploadsClient\n    //           .createUploadCredentials()\n    //           .send()\n    //           .then(response => response.body);\n    //     }\n    //     const putFileOnS3 = (credentials) => {\n    //     const s3 = new AWS.S3({\n    //     accessKeyId: credentials.accessKeyId,\n    //     secretAccessKey: credentials.secretAccessKey,\n    //     sessionToken: credentials.sessionToken,\n    //     region: 'us-east-1'\n    //   });\n    //   return s3.putObject({\n    //     Bucket: credentials.bucket,\n    //     Key: credentials.key,\n    //     Body: this.file,\n    //   }).promise();\n    // };\n\n    // const credentials = await getCredentials();\n    // putFileOnS3(credentials);\n    // // const myUsername = 'yiqingggg';\n    // // const myTileset = 'myTileset';\n\n    // uploadsClient.createUpload({\n    //     tileset: `yiqingggg.myTileset`,\n    //     url: credentials.url,\n    //     name: `${this.file.name}`,\n    //   })\n    //     .send()\n    //     .then(response => {\n    //       const upload = response.body;\n    //       console.log(upload);\n    //     });\n    //   console.log('done')\n    //   } catch (error) {\n    //     console.error(error);\n    //   } \n    // },\n    async deleteEmployee(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: 'DELETE',\n        });\n        this.employees = this.employees.filter(\n          (employee) => employee.id !== id\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async editEmployee(id, updatedEmployee) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          {\n            method: 'PUT',\n            body: JSON.stringify(updatedEmployee),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }\n        );\n        const data = await response.json();\n        this.employees = this.employees.map((employee) =>\n          employee.id === id ? data : employee\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getEmployees() {\n      try {\n        const response = await fetch(\n          'https://jsonplaceholder.typicode.com/users'\n        );\n        const data = await response.json();\n        this.employees = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n\n<style>\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n\n.small-container {\n  max-width: 680px;\n}\n</style>\n"],"sourceRoot":"src"}]}