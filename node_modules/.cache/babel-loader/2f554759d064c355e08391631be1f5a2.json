{"remainingRequest":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/src/App.vue","mtime":1632794633883},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/babel-loader/lib/index.js","mtime":1632429635042},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/cache-loader/dist/cjs.js","mtime":1632429635085},{"path":"/Users/yiqing/Downloads/vue-test/redo-mapbox-app/node_modules/vue-loader/lib/index.js","mtime":1632429636569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\" class=\"small-container\">\n    <h1>Visualize a Shapefile from Berkeley</h1>\n    <employee-form @add:shapefile=\"createUpload\" />\n    <employee-table\n      :employees=\"employees\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n    <map-component />\n  </div>\n</template>\n\n<script>\nimport dotenv from 'dotenv';\n\n// import mapboxgl from 'mapbox-gl'; // or \"const mapboxgl = require('mapbox-gl');\"\n\n// mapboxgl.accessToken =\n//   'pk.eyJ1IjoieWlxaW5nZ2dnIiwiYSI6ImNrdHhmY2hpMzBqemEybnRobWl1enBza3oifQ.dFwEcCgHZuW6IdqjLu4DnA';\n// new mapboxgl.Map({\n//   container: 'map', // container ID\n//   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n//   center: [-74.5, 40], // starting position [lng, lat]\n//   zoom: 9, // starting zoom\n// });\n\ndotenv.config();\nimport EmployeeTable from '@/components/EmployeeTable.vue';\nimport EmployeeForm from '@/components/EmployeeForm.vue';\nimport MapComponent from '@/components/MapComponent.vue';\nexport default {\n  name: 'app',\n  components: {\n    EmployeeTable,\n    EmployeeForm,\n    MapComponent,\n  },\n  data() {\n    return {\n      shapefile: [],\n    };\n  },\n  methods: {\n    async addShapefile(newShapefile) {\n      //add shapefile to array of shapefile\n      const id = this.shapefile.length;\n      newShapefile.id = id;\n      this.shapefile = [...this.shapefile, newShapefile];\n      console.log(newShapefile, this.shapefile);\n      console.log('starting upload...');\n      const getCredentials = () => {\n        return uploadsClient\n          .createUploadCredentials()\n          .send()\n          .then((response) => response.body);\n      };\n      const putFileOnS3 = (credentials) => {\n        const s3 = new AWS.S3({\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          sessionToken: credentials.sessionToken,\n          region: 'us-east-1',\n        });\n        return s3\n          .putObject({\n            Bucket: credentials.bucket,\n            Key: credentials.key,\n            Body: this.selectedFile,\n          })\n          .promise();\n      };\n      const credentials = await getCredentials();\n      putFileOnS3(credentials);\n      const myUsername = 'yiqingggg';\n      const myTileset = `myTileset0`;\n      console.log(credentials);\n      uploadsClient\n        .createUpload({\n          tileset: `${myUsername}.${myTileset}`,\n          url:\n            'https://tilestream-tilesets-production.s3.amazonaws.com/f9/_pending/ojdxb7tykp82x1s3nceqyxtkc/yiqingggg',\n          name: `UPLOAD0`,\n        })\n        .send()\n        .then((response) => {\n          const upload = response.body;\n          console.log(upload, upload.tileset);\n          tilesetid = upload.tileset;\n          this.shapefile[id].uploadId = upload.id;\n        });\n      console.log('done', this.shapefile);\n\n      // await setTimeout(() => {\n      //   this.createMaps(newShapefile.id);\n      // }, 10000);\n      // const map = new mapboxgl.Map({\n      //   container: 'map-component', // container ID\n      //   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      //   center: [-122.272781, 37.871666], // starting position [lng, lat]\n      //   zoom: 15, // starting zoom\n      // });\n      console.log(tilesetid);\n      // map.on('load', () => {\n      //   map.addSource('parks', {\n      //     type: 'vector',\n      //     url: `mapbox://yiqingggg.myTileset5`,\n      //   });\n      //   map.addLayer({\n      //     id: 'parks',\n      //     type: 'line',\n      //     source: 'parks',\n      //     'source-layer': 'UPLOAD5',\n      //     layout: {\n      //       // Make the layer visible by default.\n      //       visibility: 'visible',\n      //       'line-join': 'round',\n      //       'line-cap': 'round',\n      //     },\n      //     paint: {\n      //       'line-color': '#877b59',\n      //       'line-width': 20,\n      //     },\n      //   });\n      // });\n      // const map = new mapboxgl.Map({\n      //   container: 'map-component', // container ID\n      //   style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      //   center: [-122.272781, 37.871666], // starting position [lng, lat]\n      //   zoom: 15, // starting zoom\n      // });\n      console.log(tilesetid);\n    },\n    // async addEmployee(employee) {\n    //   try {\n    //     const response = await fetch(\n    //       'https://jsonplaceholder.typicode.com/users',\n    //       {\n    //         method: 'POST',\n    //         body: JSON.stringify(employee),\n    //         headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.employees = [...this.employees, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async getEmployees() {\n    //   // const lastId =\n    //   //   this.employees.length > 0\n    //   //     ? this.employees[this.employees.length - 1].id\n    //   //     : 0;\n    //   // const id = lastId + 1;\n    //   // const newEmployee = { ...employee, id };\n    //   // this.employees = [...this.employees, newEmployee];\n    //   try {\n    //     const response = await fetch(\n    //       'https://jsonplaceholder.typicode.com/users'\n    //     );\n    //     const data = await response.json();\n    //     this.employees = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // deleteEmployee(id) {\n    //   this.employees = this.employees.filter(\n    //     employee => employee.id !== id\n    //   )\n    // },\n    // async deleteEmployee(id) {\n    //   try {\n    //     await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n    //       method: 'DELETE',\n    //     });\n    //     this.employees = this.employees.filter(\n    //       (employee) => employee.id !== id\n    //     );\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n  },\n};\n</script>\n\n<style>\nbody {\n  margin: 0;\n  padding: 0;\n}\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n.small-container {\n  max-width: 680px;\n}\n</style>\n"],"sourceRoot":"src"}]}